<!DOCTYPE html>
<html lang="en" prefix="og: http://ogp.me/ns#">
	<head>
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<meta charset="utf-8" /> 
		<title>openradtool | application source generator</title>
		<link rel="alternate" href="atom.xml" type="application/atom+xml" title="openradtool version feed" />
		<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Alegreya+Sans:400,400italic,500" />
		<link rel="stylesheet" href="https://www.bsd.lv/css/style.css" />
		<link rel="stylesheet" href="highlight.css" />
		<link rel="stylesheet" href="index.css" />
		<meta property="og:title" content="openradtool: application source generator" />
		<meta property="og:url" content="https://kristaps.bsd.lv/openradtool/index.html" />
		<meta property="og:type" content="website" />
		<meta property="og:description" content="An open source rapid application development utility." />
		<meta name="description" content="An open source rapid application development utility." />
	</head>
	<body itemscope="itemscope" itemtype="http://schema.org/SoftwareApplication">
		<div id="announce">
			<div class="text">
				<p>
					Do you use <strong>openradtool</strong> and Node.js?
				</p>
				<p>
					We're pleased to announce <strong><a href="https://orb.capem.io">orb</a></strong>, a web application for
					managing data models complete with on-line editing, auditing, version control, and
					<a href="https://npmjs.org">npm</a> integration.  Please <a href="info@capem.io">contact us</a> if you'd
					like to participate in the early release of this system!
				</p>
			</div>
		</div>
		<header>
			<section id="breadcrumbs">
				<div>
					<div>
						BSD.lv tools for <a href="https://learnbchs.org">BCHS</a>: 
						<a href="https://kristaps.bsd.lv/kcgi">kcgi</a>, 
						<a href="https://kristaps.bsd.lv/sqlbox">sqlbox</a>, 
						<a href="https://kristaps.bsd.lv/openradtool">ort</a>
					</div>
				</div>
			</section>
			<section id="header">
				<div class="intro">
					<h1 itemprop="name">openradtool</h1> 
					<span>&#8212; 
						<span itemprop="description">application source generator</span> 
						<nav data-sblg-nav="1" data-sblg-navsort="date" data-sblg-navtag="version" 
						 data-sblg-navsz="1" data-sblg-navxml="1">
							${sblg-titletext}
						</nav>
					</span>
				</div>
				<nav>
					<a href="https://github.com/kristapsdz/openradtool">github</a>
					<a href="snapshots/openradtool.tar.gz">source</a>
					<a href="snapshots">archive</a>
					<a href="archive.html">releases</a>
					<a href="https://kristaps.bsd.lv/cgi-bin/minci.cgi/index.html?project-name=openradtool">builds</a>
					<a href="atom.xml">feed</a>
				</nav>
			</section>
		</header>
		<article>
			<nav>
				<span>introduction&#8230;</span>
			</nav>
			<section class="text">
				<div id="intro">
					<figure>
						<img src="index-fig7.svg" alt="ort(5) to output" />
					</figure>
					<p class="intro">
						<span class="nm">openradtool</span> (<q class="nm">ort</q>) is an 
						<a href="https://opensource.org/licenses/ISC">open source</a> RAD tool generating front-end code
						(TypeScript) and back-end code (SQL, C, Rust, Node.js) from a straightforward data model.
					</p>
				</div>
				<p>
					The system consists of a set of source generators and analytical tools, each accepting a 
					<a href="ort.5.html">ort(5)</a> configuration that describes your data and how it is accessed, modified,
					created, deleted.  It runs on <a href="https://www.openbsd.org">OpenBSD</a>, 
					<a href="https://www.netbsd.org">NetBSD</a>, <a href="https://www.freebsd.org">FreeBSD</a>, Linux (glibc 
					and musl),
					<a href="https://www.apple.com">Mac OS X</a>, 
					<a href="https://www.oracle.com/solaris/solaris11">Solaris</a> (SunOS), and
					<a href="https://omniosce.org">OmniOS</a> (IllumOS).  The generated sources run on the same.
					Development is on OpenBSD, which has the highest level of built-in security.
				</p>
				<p>
					The tools manage or generate the following application components.
				</p>
				<ul id="topicboxes">
					<li>
						<span class="topic">
							Database
						</span>
						<span class="contents">
							<a href="#gen-sql">SQL schema</a> generation (and <a href="#gen-sqldiff">schema
								upgrade</a> commands) for your SQLite database.
						</span>
					</li>
					<li>
						<span class="topic">
							Data Layer
						</span>
						<span class="contents">
							Node.js, C, and Rust <a href="#gen-backend">back-end source code</a>&#8212;API and
							implementation&#8212;for manipulating and exporting from the database.  This must be
							driven by your program code.
						</span>
					</li>
					<li>
						<span class="topic">
							Presentation Layer
						</span>
						<span class="contents">
							Front-end <a href="#gen-js">TypeScript</a> source code populating HTML5
							trees with exported data.  This must be driven by your front-end code.
						</span>
					</li>
					<li>
						<span class="topic">
							Internationalisation
						</span>
						<span class="contents">
							<a href="#gen-xliff">Translation files</a> for front-end TypeScript labels.
						</span>
					</li>
					<li>
						<span class="topic">
							Access Controls
						</span>
						<span class="contents">
							Security and accountability: <a href="#gen-audit">role audits</a> for studying the data
							accessable by user roles.
						</span>
					</li>
				</ul>
				<p>
					See the <a href="https://github.com/kristapsdz/openradtool">GitHub</a> repository for installation and issue
					tracking.
					<span class="nm">openradtool</span> is a <a href="https://www.bsd.lv">BSD.lv</a> project, n&#x00e9;e
					<span class="nm">kwebapp</span>.
				</p>
			</section>
			<nav id="usage">
				<span>usage&#8230;</span>
			</nav>
			<section id="usage-box" class="text">
				<p class="explain">
					<span class="nm">ort</span> tools are designed to be operated by <a
						href="https://man.openbsd.org/make.1">make(1)</a> or other build tool.
					During development, these tools continuously keep C sources, TypeScript, translations, and so on up to
					date from a single <a href="ort.5.html">ort(5)</a> file.
					These files are in turn compiled or bundled into your application.
				</p>
				<figure>
					<img src="index.svg" alt="ort(5) productions" />
				</figure>
				<h2>
					<span>1.</span> validate configuration
				</h2>
				<code>
					% <a href="ort.1.html">ort</a> <a href="db.ort.html">db.ort</a>
				</code>
				<section>
					<figure>
						<img src="index-fig1.svg" alt="ort(1) functionality" />
					</figure>
					<p>
						Consider an example <a href="ort.5.html">ort(5)</a> configuration <a
							href="db.ort.html">db.ort</a>.  It defines three data objects&#8212;a <code>user</code>,
						<code>company</code>, and <code>session</code>&#8212;with relations between the three.
						Each <code>session</code> refers to a <code>user</code> by the <code>userid</code> field.
						Then each <code>user</code> refers to a <code>company</code> by its <code>cid</code>.
					</p>
					<p>
						The <a href="ort.1.html">ort(1)</a> utility parses and validates the configuration.
						To <em>do</em> something with this configuration, we need to have code.
						Most applications start by creating an API from the data configuration as described in the next
						section.
					</p>
					<p>
						<em>This validation is superfluous, as all other tools validate during parse.</em>
					</p>
				</section>
				<h2 id="gen-backend">
					<span>2.</span> generate back-end code
				</h2>
				<code>
					% <a href="ort-c-header.1.html">ort-c-header</a> -jv 
					<a href="db.ort.html">db.ort</a> &gt; <a href="db.h.html">db.h</a>
					<br />
					% <a href="ort-c-source.1.html">ort-c-source</a> -jv 
					-h <a href="db.h.html">db.h</a> <a href="db.ort.html">db.ort</a> &gt; <a href="db.c.html">db.c</a>
					<br />
					% <a href="ort-nodejs.1.html">ort-nodejs</a> 
					<a href="db.ort.html">db.ort</a> &gt; <a href="db.node.ts.html">db.node.ts</a>
					<br />
					% <a href="ort-rust.1.html">ort-rust</a> 
					<a href="db.ort.html">db.ort</a> &gt; <a href="db.rust.rs.html">db.rust.rs</a>
				</code>
				<section>
					<p>
						C, Rust, and <a href="https://nodejs.org">Node.js</a> back-ends are available.
						The Rust output is still somewhat experimental.
					</p>
					<figure>
						<img src="index-fig8.svg" alt="ort-nodejs(1) functionality" />
					</figure>
					<p>
						The Node.js backend currently lacks many of the security benefits of using the C API, such as
						privilege separation, but is the more widely-used of languages.
						The generated TypeScript code is built to work within <a href="https://npmjs.com">npm</a>
						applications.
						A full application example is available in <a href="ort-nodejs.1.html">ort-nodejs(1)</a>.
					</p>
					<figure>
						<img src="index-fig2.svg" alt="ort-c-header(1) and ort-c-source(1) functionality" />
					</figure>
					<p>
						The C API files may be linked to sources (usually, but not necessarily) driving
						a <a href="https://kristaps.bsd.lv/kcgi">kcgi(3)</a> CGI script.
						Each function and structure in the header file is documented thoroughly.
						The source files are also documented, though more sparsely.
					</p>
					<figure>
						<img src="index-fig9.svg" alt="ort-c-rust(1) functionality" />
					</figure>
					<p>
						The <a href="https://rust-lang.org">Rust</a> output is still experimental, but is able to
						interface with data models in a manner similar to the Node.js output.
						It does not yet have integrated documentation or validation.
					</p>
				</section>
				<h2 id="gen-sql">
					<span>3.</span> generate and initialise database
				</h2>
				<code>
					% <a href="ort-sql.1.html">ort-sql</a> <a href="db.ort.html">db.ort</a> &gt; <a href="db.sql.html">db.sql</a>
					<br />
					% sqlite3 db.db &lt; <a href="db.sql.html">db.sql</a>
				</code>
				<section>
					<figure>
						<img src="index-fig3.svg" alt="ort-sql(1) functionality" />
					</figure>
					<div>
						<p>
							Some object fields, such as the <code>user</code> structure inside of the section, are
							not part of the SQL schema, but required for creating the SQL queries during runtime.
							For the most part, however, all <a href="ort.5.html">ort(5)</a> fields map into database
							columns.
						</p>
						<p>
							The SQL schema file is thoroughly documented.
							Use <a href="https://kristaps.bsd.lv/sqliteconvert">sqliteconvert</a> or similar tool
							to browse the SQL documentation for any non-trivial application.
						</p>
					</div>
				</section>
				<h2 id="gen-sqldiff">
					<span>4.</span> update database
				</h2>
				<code>
					% <a href="ort-sqldiff.1.html">ort-sqldiff</a>
					<a href="db.old.ort.html">db.old.ort</a> <a href="db.ort.html">db.ort</a> &gt; 
					<a href="db.update.sql.html">db.update.sql</a>
					<br />
					% sqlite3 db.db &lt; <a href="db.sql.html">db.update.sql</a>
				</code>
				<section>
					<figure>
						<img src="index-fig4.svg" alt="ort-sqldiff(1) functionality" />
					</figure>
					<p>
						Database upgrades are a pain: <a href="ort-sqldiff.1.html">ort-sqldiff(1)</a> programmatically
						tracks differences in the database schema.
						This allows for continuous testing of database compatibility.
						It also generates the correct SQL commands for properly upgrading an existing database without
						fear of ordering or missing field attributes.
					</p>
					<p>
						(Update scripts should, however, always be perused for correctness.)
					</p>
				</section>
				<h2 id="gen-js">
					<span>5.</span> generate typescript front-end
				</h2>
				<code>
					% <a href="ort-javascript.1.html">ort-javascript</a>
					<a href="db.ort.html">db.ort</a> &gt; <a href="db.ts.html">db.ts</a>
				</code>
				<section>
					<figure>
						<img src="index-fig5.svg" alt="ort-javascript(1) functionality" />
					</figure>
					<p>
						The last part of the toolchain is to handle the JSON-export output in the browser itself.
						The <a href="ort-javascript.1.html">ort-javascript(1)</a> tool will also generate 
						TypeScript files to assist in filling in data for your front-end web application code.
					</p>
					<p>
						Both are the same, and provide an easy interface for replacing elements (noted by class names)
						in HTML DOM trees with data.
						All of this is documented using <a href="https://typedoc.org">tsdoc</a> notation.
						For example, consider the following:
					</p>
					<article data-sblg-permlink="0" data-sblg-article="1"></article>
					<p>
						A TypeScript file may invoke 
						<code>new ort.user(res).fill<wbr />(document.getElementById<wbr />('foobar'))</code>,
						where <code>res</code> is the JSON object parsed from an AJAX call to the CGI script.
						This will recursively replace text (classes ending with <code>-text</code>), fill in input
						values, and allow for extensive customisation.
					</p>
				</section>
				<h2 id="gen-xliff">
					<span>6.</span> translate javascript labels
				</h2>
				<code>
					% <a href="ort-xliff.1.html">ort-xliff</a>
					<a href="db.ort.html">db.ort</a> &gt; <a href="db.fr.xml.html">db.fr.xml</a>
					<br />
					% <a href="ort-xliff.1.html">ort-xliff</a> -j
					<a href="db.ort.html">db.ort</a> <a href="db.fr.xml.html">db.fr.xml</a> &gt; 
					<a href="db.trans.ort.html">db.trans.ort</a>
				</code>
				<section>
					<figure>
						<img src="index-fig6.svg" alt="ort-xliff(1) functionality" />
					</figure>
					<p>
						The <a href="ort-javascript.1.html">ort-javascript(1)</a> tool is capable of filling in labels
						of exported enumeration and bitfield values.
						For example, if an exported field is of the <code>enum foo</code> type, and the enumeration's
						items have <code>jslabel</code> tags, integral enumeration values can be programmatically
						converted to the labels by invoking the <code>ort.foo.format()</code> method as a custom
						callback.
					</p>
					<p>
						These strings may be translated by using the <a href="ort-xliff.1.html">ort-xliff(1)</a>
						utility, which extracts translatable strings into the industry-standard <a
							href="http://docs.oasis-open.org/xliff/v1.2/os/xliff-core.html">XLIFF 1.2</a> format.
						The translation files may then be merged back into the configuration file, with the output piped
						into <a href="ort-javascript.1.html">ort-javascript(1)</a>, for a full translation sequence.
					</p>
				</section>
				<h2 id="gen-audit">
					<span>7.</span> audit role-based access
				</h2>
				<code>
					% <a href="ort-audit.1.html">ort-audit</a>
					<a href="audit-example.ort.html">audit-example.ort</a> user
				</code>
				<section>
					<p>
						Arguably the most powerful feature of <span class="nm">ort</span>.
						Audit <a href="https://learnbchs.org/rbac.html">role-based access control</a> access with <a
							href="ort-audit.1.html">ort-audit(1)</a> and <a
							href="ort-audit-json.1.html">ort-audit-json(1)</a>:
						see the full availability of data and operations available to the role.
						Role compliance in <span class="nm">ort</span> is guaranteed by having separate jailed database
						and application processes.
					</p>
					<p>
						In the example role-backed <a href="audit-example.ort.html">audit-example.ort</a> with roles
						<code>user</code> and <code>admin</code>, for example, these tools can fully audit for the
						<code>user</code> role as seen in the exemplar <a href="audit.html">audit.html</a> created with
						<a href="ort-audit-json.1.html">ort-audit-json(1)</a>.
						This visualisation breaks down access by structures (the foundational objects of <a
							href="ort.5.html">ort(5)</a>) and then grouped by operation.
					</p>
				</section>
			</section>
		</article>
		<footer>
			Copyright &#xa9; 2017&#8211;2021, <a href="https://github.com/kristapsdz">Kristaps Dzonsons</a>
		</footer>
	</body>
</html>
