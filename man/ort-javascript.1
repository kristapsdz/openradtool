.\"	$OpenBSD$
.\"
.\" Copyright (c) 2017--2020 Kristaps Dzonsons <kristaps@bsd.lv>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate$
.Dt ORT-JAVASCRIPT 1
.Os
.Sh NAME
.Nm ort-javascript
.Nd produce ort TypeScript interface
.Sh SYNOPSIS
.Nm ort-javascript
.Op Fl S Ar sharedir
.Op Ar config...
.Sh DESCRIPTION
Accepts
.Xr ort 5
.Ar config
files, defaulting to standard input,
and creates a TypeScript interface that format the JSON produced by
.Xr ort-c-header 1
.Fn json_xxxx
functions and
.Xr ort-nodejs 1
exports.
Its arguments are as follows:
.Bl -tag -width Ds
.It Fl S Ar sharedir
Directory containing external source files.
The default is to use the install-time directory.
.El
.Pp
Output consists of an ES2021
.Qq ort
namespace with classes that fill data from the JSON into a DOM tree by
operating on elements having specific classes.
(While ES2021 is an official baseline; in practice, output code conforms
to ES7 or even ES6.)
The output of is fully documented using TypeDoc.
.Ss Namespaces
All data produced by
.Nm
is contained within a namespace
.Qq ort .
For example, let
.Qq foo
be a
.Cm struct
defined in the configuration.
.Bd -literal -offset indent
namespace ort {
  export interface DataCallbacks { ... }
  export interface fooData { ... }
  export class foo { ... }
}
.Ed
.Ss Interfaces
Each
.Cm struct
in the configuration is rendered as a TypeScript interface suffixed
.Qq Data ,
for example,
.Vt ort.fooData
for a structure named
.Qq foo .
Each native field is mapped to a native type.
For references, the type is the referenced interface type.
.Bd -literal -offset indent
namespace ort {
  export interface fooData {
    sometext: string;
    someint: string|number;
    somenumber: number;
    areference: barData;
  }
}
.Ed
.Pp
Types are mapped as follows, from
.Xr ort 5
configuration type to the TypeScript type along with any notes.
.Bl -column -offset indent "epoch " "number|string " "base-64 encoded"
.It Cm bit Ta number|string Ta
.It Cm date Ta number|string Ta
.It Cm epoch Ta number|string Ta
.It Cm int Ta number|string Ta
.It Cm real Ta number Ta
.It Cm blob Ta string Ta base-64 encoded
.It Cm text Ta string Ta
.It Cm email Ta string Ta
.It Cm enum Ta number|string Ta
.It Cm bits Ta number|string Ta
.El
.Pp
Front-ends should be attentive to integer types being either string or
numeric.
This is to accommodate for the 53-bit limit of what's stored as 64-bit
integers.
.Pp
If a field may not be exported due to role restrictions, it is marked as
optional within the interface.
.Pp
In addition to this, a
.Vt ort.DataCallbacks
interface is defined for
.Sx Customisation
and contains callback functions for each field for formatting purposes.
.Ss Classes
Each
.Cm struct
in the configuration is rendered as a class whose members may be used
for formatting output.
They are named as found in the configuration.
.Pp
The following methods are generated for each structure.
.Bl -tag -width Ds
.It Fn "new foo" "obj: ort.fooData|ort.fooData[]" Ns No : foo
Constructor passed an object or array.
The array may consist of zero objects.
.It Fn fillInner "e: HTMLElement|null" "custom?: ort.DataCallbacks|null" Ns No : void
Fill labelled elements within (but not including) element
.Fa e ,
with optional call-backs
.Fa custom .
If
.Fa e
is
.Dv null ,
does nothing.
.It Fn fillInnerByClass "e: HTMLElement|null" "name: string" "custom?: ort.DataCallbacks|null" Ns No : void
Convenience method for invoking
.Fn fillInner
over all descendents of element
.Fa e
having class
.Fa name .
If
.Fa e
is
.Dv null ,
does nothing.
The
.Qq inner
applies to both
.Fa e
and the matched descendents.
.It Fn fill "e: HTMLElement|null" "custom?: ort.DataCallbacks|null" Ns No : void
Fill labelled elements within (including) element
.Fa e ,
with optional call-backs
.Fa custom .
If
.Fa e
is
.Dv null ,
does nothing.
.It Fn fillByClass "e: HTMLElement|null" "name: string" "custom?: ort.DataCallbacks|null" Ns No : void
Convenience method for invoking
.Fn fill
over all descendents of (and including) element
.Fa e
having class
.Fa name .
If
.Fa e
is
.Dv null ,
does nothing.
.It Fn fillArray "e: HTMLElement|null" "custom?: ort.DataCallbacks|null" Ns No : void
First adds the
.Qq hide
class to
.Fa e ,
then invokes
.Fn fill
repeatedly over the objects (or standalone object) passed at
construction time by removing, then subsequently cloning and appending,
the first element of
.Fa e .
The
.Fn fill
function is passed the new element's root and
.Fa custom .
If
.Fa e
is
.Dv null
or empty, does nothing except add the
.Qq hide
class to
.Fa e .
.It Fn fillArrayByClass "e: HTMLElement|null" "name: string" "custom?: ort.DataCallbacks|null" Ns No : void
Convenience method for invoking
.Fn fillArray
over all descendents of (and including) element
.Fa e
having class
.Fa name .
If
.Fa e
is
.Dv null ,
does nothing.
.It Fn fillArrayOrShow "e: HTMLElement|null" "toshow: HTMLElement|null" "custom?: ort.DataCallbacks|null" Ns No : void
Convenience method around
.Fa fillArray
removing the
.Qq hide
class from
.Fa toshow
if the object or objects at construction are non-empty.
.It Fn fillArrayOrHide "e: HTMLElement|null" "tohide: HTMLElement|null" "custom?: ort.DataCallbacks|null" Ns No : void
Convenience method around
.Fa fillArray
adding the
.Qq hide
class to
.Fa tohide
if the object or objects at construction are empty.
.El
.Pp
Formatting within the elements passed to these methods operates on
specific class names.
.Pp
The following class names are recognised, letting
.Qq foo
be the name of a structure in the
.Ar config
and
.Qq xxxx
be any of its fields.
If the field is not exported at all or in the given role, no action is
taken at all on the following.
.Bl -tag -width Ds
.It Li foo-xxxx-bits-checked
Sets or unsets the
.Li checked
attribute depending upon whether the input's
.Li value
attribute (if found), as a bit index, is set in the object as a
bit-field.
Only applicable to bit and bitfield types.
.It Li foo-xxxx-date-text
Replaces the contents of the element with the ISO 8601 date of the
object's value.
Only applicable to date and epoch types.
Does nothing if the object is null.
.It Li foo-xxxx-date-value
Sets the
.Li value
attribute to the ISO 8601 date of the object's value.
Only applicable to date and epoch types.
Does nothing if the object is null.
.It Li foo-xxxx-enum-select
Sets or unsets the
.Li selected
attribute on descending (non-inclusive)
.Li <option>
elements depending upon whether the input's
.Li value
attribute (if found) matches.
.It Li foo-xxxx-obj
For structures, creates and invokes the
.Fn fillInner
method on the nested structure at the given element and its descendents.
This is only applicable for structure types.
.It Li foo-xxxx-text
Replaces the contents of the element with the field value.
This is not applicable to blob native types.
.It Li foo-xxxx-value
Sets the
.Li value
attribute (as in a form submission) with the field value.
This is not applicable to blob native types.
.It Li foo-xxxx-value-checked
Sets or unsets the
.Li checked
attribute depending upon whether the input's
.Li value
attribute matches the objects.
This is not applicable to blob or structure types.
.It Li foo-has-xxxx
Remove the
.Qq hide
class if the object is null, otherwise add the
.Qq hide
class.
.It Li foo-no-xxxx
Add the
.Dq hide
class if the object is null, otherwise remove the
.Dq hide
class.
.El
.Pp
All class methods accept an optional argument for providing custom
per-field or per-structure callbacks.
Keys in the object must consist of the structure name, followed by a
dash, followed by the field name.
For example, assuming a structure
.Dq client
with a field
.Dq dob
consisting of a UNIX epoch:
.Bd -literal -offset indent
const custom: ort.DataCallbacks = {
  'client-dob': formatDate
};
new ort.client(obj).fillInner(document.body, custom);
.Ed
.Pp
And letting a formatting function be:
.Bd -literal -offset indent
function formatDate(e: HTMLElement,
  name: string, v: number|string|null): void {
    /* Do something... */
}
.Ed
.Pp
The same can be applied to structures instead of to fields within
structures.
The keys for these are simply the structure name.
.Bd -literal -offset indent
const custom: ort.DataCallbacks = {
  'client': formatClient
};
new ort.client(obj).fillInner(document.body, custom);
.Ed
.Pp
The callback will then be provided the full client object.
.Bd -literal -offset indent
function formatClient(e: HTMLElement,
  name: string, v: ort.clientData|null): void {
    /* Do something... */
}
.Ed
.Pp
In either case, the value for the custom key may also be an array of
functions just as above.
Each will be invoked in the order given, in the same way.
.Bd -literal -offset indent
const custom: ort.DataCallbacks = {
  'client': [ format1, format2 ]
};
.Ed
.Pp
The callback function (or functions) will be invoked regardless of
whether the value has been set.
In the event of an unset field value, the function is passed
.Dv null .
.Pp
For example, to fill in the label of an enumeration
.Li enum someenum
on a field named
.Li val ,
provide a custom callback.
.Bd -literal -offset indent
const e = document.getElementById('foo');
const obj = <ort.fooData>JSON.parse(response);
const custom: ort.DataCallbacks = {
  'foo-val': ort.someenum.format
};

new ort.foo(obj).fill(e, custom);
.Ed
.Ss Static Classes
Each enumeration and bitfield corresponds to a class with field values
and formatting static methods.
.Pp
Enumeration classes contains static members with the string value of
its items.
For example, an enumeration
.Qq foo
will produce a class
.Qq foo
with static members corresponding to each enumeration item.
.Pp
Bitfield classes are similarly named and contain two static members per
item: one for the bit index, one for the generated bit mask.
The former is prefixed
.Li BITI_
and is a number, the latter with
.Li BITF_
and is a string.
Thus an item
.Qq bar
creates numeric static members
.Va BITI_bar
and
.Va BITF_bar .
There is always a
.Va BITI__MAX
that is one greater than the largest item's value.
.Pp
Each enumeration corresponds to a class with field values and formatting
static methods.
These take advantage of the
.Cm jslabel
enumeration label described in
.Xr ort 5 .
.Bl -tag -width Ds
.It Fn format "e: HTMLElement" "name: string|null" "value: string|number|null" Ns No : void
Fills in all elements (not inclusive) descending from
.Fa e
having class
.Fa name Ns "-label"
with the configuration label corresponding to the enumeration value
.Fa value .
If
.Fa name
is
.Dv null ,
the element itself has its contents filled in.
.Pp
If
.Fa value
is null, the
.Qq ort-class
is added and the
.Cm isnull
label is used (or an empty string).
.El
.Pp
If a language is specified in the root of the HTML or XML document with
the
.Qq lang
attribute, it is first matched a label for that language.
If there is no language, or none for that label, the default label is
used.
If there is no default label, an empty string is used instead.
An empty string is also used for invalid enumeration values.
.Pp
A common label fill idiom is as follows:
.Bd -literal -offset indent
<div id="place">
  <span class="foo-val-label>label</span>:
  <span class="foo-val-text>text</span>
</div>
.Ed
.Pp
Letting the field
.Qq val
have type
.Cm enum anenum ,
both label and text may be filled in as follows:
.Bd -literal -offset indent
const custom: ort.DataCallbacks = {
  'foo-val': ort.anenum.format
};
.Ed
.Pp
This will fill in both the
.Cm jslabel
of the value's corresponding item and the value itself.
.Pp
Bitfields behave similarly and have the same member.
.Bl -tag -width Ds
.It Fn format "e: HTMLElement" "name: string|null" "value: string|number|null" Ns No : void
Fills in all elements (not inclusive) descending from
.Fa e
having class
.Fa name Ns "-label"
with all configuration labels with corresponding bits set in
.Fa value .
If
.Fa name
is
.Dv null ,
the element itself has its contents filled in.
.Pp
If
.Fa value
is
.Dv null ,
the
.Qq ort-null
class is added and the
.Cm isnull
label is used (or an empty string).
If
.Fa value
is zero, the
.Qq ort-unset
class is added and the
.Cm isunset
label is used (or an empty string).
Multiple matching labels are separated by a comma and space.
If any given bit doesn't have or match a label, it is not given any
label text.
.El
.\" The following requests should be uncommented and used where appropriate.
.\" .Sh CONTEXT
.\" For section 9 functions only.
.\" .Sh RETURN VALUES
.\" For sections 2, 3, and 9 function return values only.
.\" .Sh ENVIRONMENT
.\" For sections 1, 6, 7, and 8 only.
.\" .Sh FILES
.Sh EXIT STATUS
.Ex -std
.Sh EXAMPLES
Start with a means to contact a CGI script producing JSON data formatted
by the
.Fn json_xxxx
family of
.Xr ort-c-header 1 .
This does not do any error checking.
Let this file be called
.Pa script.ts .
.Bd -literal -offset indent
function init(): void
{
  const xmh = new XMLHttpRequest();
  xmh.onreadystatechange = function(){
    const v = xmh.responseText;
    if (xmh.readyState === 4 && xmh.status === 200)
        success(v);
  };
  xmh.open('GET', 'https://your-cgi-script', true);
  xmh.send();
}
.Ed
.Pp
Now in the same file, define
.Fn success
to parse the JSON response content using the classes and methods defined
in the output of
.Nm .
.Bd -literal -offset indent
function success(resp: string): void
{
  const obj = <ort.fooData>JSON.parse(resp);
  new ort.foo(obj).fill
    (document.getElementById('place'));
}
.Ed
.Pp
To drive the script, cause
.Fn init
to be invoked when the page has loaded.
.Bd -literal -offset indent
window.addEventListener('load', init);
.Ed
.Pp
The following abbreviated HTML in which to display the
contents of these objects.
Let
.Pa foo.js
be the concatenated transpiled output of all TypeScript files.
.Bd -literal -offset indent
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Example</title>
    <script src="foo.js"></script>
  </head>
  <body>
    <div id="place">
      <span class="foo-xxxx-text>
        Replaced by the "text" field.
      </span>
    </div>
  </body>
</html>
.Ed
.Pp
Assuming a configuration file
.Pa foo.ort ,
the following creates the single JavaScript file:
.Bd -literal -offset indent
% ort-javascript foo.ort > foo.ts
% npx tsc --outFile foo.js foo.ts script.ts
.Ed
.Pp
Depending on the typescript version,
.Fl -target Ar es2021
and
.Fl -libs Ar es2021,dom
may need to passed as additional arguments.
.\" .Sh DIAGNOSTICS
.\" For sections 1, 4, 6, 7, 8, and 9 printf/stderr messages only.
.\" .Sh ERRORS
.\" For sections 2, 3, 4, and 9 errno settings only.
.Sh SEE ALSO
.Xr ort-c-header 1 ,
.Xr ort-nodejs 1 ,
.Xr npx 1 ,
.Xr typedoc 1 ,
.Xr ort 5
.\" .Sh STANDARDS
.\" .Sh HISTORY
.\" .Sh AUTHORS
.\" .Sh CAVEATS
.\" .Sh BUGS
