.\"	$Id$
.\"
.\" Copyright (c) 2017--2020 Kristaps Dzonsons <kristaps@bsd.lv>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate$
.Dt ORT 5
.Os
.Sh NAME
.Nm ort
.Nd syntax for ort configuration
.Sh DESCRIPTION
An
.Nm
configuration is a human-readable data model format.
It defines an application's data types, modifiers (creation,
modification, deletion), queries, and access control.
.Pp
Configurations have one or more structures, zero or more user-defined
types (enumerations, bitfields), and zero or more access control roles.
.Bd -literal -offset indent
config :== [ enum | bitfield | struct ]+ [ roles ]?
roles :== "roles" "{"
  [ "role" roledata ";" ]+
"};"
struct :== "struct" structname "{"
  [ "comment" string_literal ";" ]?
  [ "count" searchdata ";" ]*
  [ "delete" deletedata ";" ]*
  [ "field" fielddata ";" ]+
  [ "insert" ";" ]*
  [ "iterate" searchdata ";" ]*
  [ "list" searchdata ";" ]*
  [ "roles" roledata ";" ]*
  [ "search" searchdata ";" ]*
  [ "unique" uniquedata ";" ]*
  [ "update" updatedata ";" ]*
"};"
enum :== "enum" enumname "{"
  [ "comment" string_literal ";" ]?
  [ "item" enumdata ";" ]+
  [ "isnull" label ";" ]?
"};"
bitfield :== "bits" bitsname "{"
  [ "comment" string_literal ";" ]?
  [ "item" bitsdata ";" ]+
  [ "isunset" label ";" ]?
  [ "isnull" label ";" ]?
"};"
.Ed
.Pp
Structures describe a class of data, such as a user, animal, product,
etc.
They consist of data and actions on that data: querying, creating,
modifying, deleting.
The data is specified in fields defining type, validation constraints,
relations to other structures' data, and so on.
.Pp
Data types may be native (integers, strings, references), user-defined
(enumerations or bit-fields), or meta (currently only sub-structures).
Enumerations define fixed constants used in data field definitions.
Bit-fields are similar, except that they describe bits set within an
single value.
.Pp
Roles define access control on data content and operations.
.Pp
Structures, user-defined types, and roles are collectively called a
configuration's
.Qq objects .
.Sh SYNTAX
In
.Nm ,
white-space separates tokens: it is discarded except as found within
quoted literals.
Thus, the following are identical except for the name:
.Bd -literal -offset indent
struct foo {
  field id int rowid;
};
struct bar{field id int rowid;};
.Ed
.Pp
Except for the content of string literals, a
.Nm
configuration only recognises ASCII characters.
.Ss Identifiers
Objects are generally named by an identifier.
These are always case-insensitive alphanumeric non-empty string
beginning with a letter.
There are many disallowed or reserved identifiers.
There are also unique name constraints to consider (e.g., no two
structures can have the same name, etc.).
.Pp
A conforming and non-conforming identifier:
.Bd -literal -offset indent
enum foobar { ... };  # ok
enum foo_bar { ... }; # no
.Ed
.Pp
Although identifiers may appear in any case, they are internally
converted to lowercase (this includes, for example, role names, query names,
field names, language labels, etc.).
.Ss String literals
Another common syntactic element is the string literal: a double-quoted
string where internal double quotes may be escaped by a single preceding
backslash.
.Bd -literal -offset indent
struct ident { field id int comment "\e"Literal\e"."; };
.Ed
.Ss Document Comments
Document comments are begun by the hash mark
.Pq Dq #
and extend to the end of the line.
.Bd -literal -offset indent
# This is my structure.
struct ident {
  field id int comment "\e"Literal\e"."; # End of line.
};
.Ed
.Pp
They are always discarded and not considered part of the parsed
configuration file.
.Ss Numbers
Both decimal and integral numbers are recognised.
Integral numbers are signed and limited to 64 bits and formatted as
.Li [-]?[0-9]+ .
Decimal numbers are similarly formatted as
.Li [-]?[0-9]+.[0-9]* .
The difference between the two is the existence of the decimal.
.Ss Ordering
There are no ordering constraints on objects: all linkage between
components (e.g., referenced fields, roles, types, etc.) occurs after
parsing the document.
.Sh STRUCTURES
A structure consists of data definitions, operations, and access.
It begins with
.Cm struct ,
then the unique identifier of the structure, then elements within the
curly braces.
.Bd -literal -offset indent
"struct" structname "{"
  [ "comment" string_literal ";" ]?
  [ "count" searchdata ";" ]*
  [ "delete" deletedata ";" ]*
  [ "field" fielddata ";" ]+
  [ "insert" ";" ]?
  [ "iterate" searchdata ";" ]*
  [ "list" searchdata ";" ]*
  [ "roles" roledata ";" ]*
  [ "search" searchdata ";" ]*
  [ "unique" uniquedata ";" ]*
  [ "update" updatedata ";" ]*
"};"
.Ed
.Pp
The elements may consist of one or more
.Cm field
describing data fields; optionally a
.Cm comment
for describing the structure;
zero or more
.Cm update ,
.Cm delete ,
or
.Cm insert
statements that define data modification;
zero or more
.Cm unique
statements that create unique constraints on multiple fields;
and zero or more
.Cm count ,
.Cm list ,
.Cm iterate ,
or
.Cm search
for querying data; and zero or more
.Cm roles
statements enumerating role-based access control.
.Ss Fields
Column definitions.
Each field consists of the
.Cm field
keyword followed by an identifier and, optionally, a
type with additional information.
.Bd -literal -offset indent
"field" name[":" target]? [type [typeinfo]*]? ";"
.Ed
.Pp
The name may either be a standalone identifier or a
.Qq foreign key
referencing a field in another structure by the structure and field
name.
In this case, the referenced field must be a
.Cm rowid
or
.Cm unique
and have the same type.
.Pp
The type, if specified, may be one of the following.
.Bl -tag -width Ds -offset indent
.It Cm bit
Integer constrained to 64-bit bit index (that is, 0\(en64).
The bit indices start from 1 in order to represent a zero value (no bits
to set).
Non-zero values must be merged into a bit-field by setting
.Li 1LLU << (value - 1)
.Pq using C notation
prior to storage.
For entire bitfields, see
.Cm bits .
.It Cm bitfield Ar name
Alias for
.Cm bits .
.It Cm bits Ar name
Integer constrained to the given
.Ar name
bitfield's bits.
As with
.Cm bit ,
non-zero values must be merged into a bit-field by setting
.Li 1LLU << (value - 1)
.Pq using C notation
prior to storage.
.It Cm blob
A fixed-size binary buffer.
.It Cm email
Text constrained to e-mail address format.
.It Cm enum Ar name
Integer constrained to valid enumeration values of
.Ar name .
.It Cm int
A 64-bit signed integer.
.It Cm password
Text.
This field is special in that it converts an input password into a hash
before insertion into the database.
It also can properly search for password hashes by running the hash
verification after extraction.
Thus, there is a difference between a password field that is being
inserted or updated (as a password, which is hashed) and extracted using
a search (as a hash).
.It Cm real
A double-precision float.
.It Cm epoch
Integer constrained to valid
.Vt time_t
values and similarly represented in the C API.
The
.Cm date
alias is also available, which is the same but using a date (ISO 8601)
sequence input validator.
.It Cm struct Ar field
A substructure referenced by the
.Ar field
target
.Cm struct .
This meta type is not represented by real data: it only structures the
output code.
In the C API, for example, this is represented by a
.Vt struct name
of the referent structure.
The
.Ar field
may be marked with
.Cm null ,
but this involves a not-inconsiderable performance hit when querying
(directly or indirectly) on the structure.
Sub-structures may not be recursive: a field may not reference another
.Cm struct
that eventually references the origin.
.It Cm text
Text, usually encoded in ASCII or UTF-8.
.El
.Pp
The
.Cm typeinfo
provides further information (or operations) regarding the field, and
may consist of the following:
.Bl -tag -width Ds -offset indent
.It Cm actdel Ar action
Like
.Cm actup
but on deletion of the field in the database.
.It Cm actup Ar action
SQL actions taken when the field is updated.
May be one of
.Ar none
.Pq do nothing ,
.Ar restrict
.Pq disallow the reference from deleting if referrers exist ,
.Ar nullify
.Pq set referrers to null ,
.Ar cascade ,
.Pq propogate new value to referrers ,
or
.Ar default
.Pq set referrers to their default values .
This is only available on foreign key references.
The
.Ar default
value may only be used if the field is marked
.Cm null
or has a
.Cm default
value.
The
.Ar nullify
value may only be used if the field is marked
.Cm null .
.It Cm comment Ar string_literal
Documents the field using the quoted string.
.It Cm default Ar integer|decimal|date|string_literal|enum
Set a default value for the column that's used
.Em only
when adding columns to the SQL schema via
.Xr ort-sqldiff 1 .
It's only valid for numeric, date, enumeration, or string literal
(email, text) field types.
Dates must be in yyyy-mm-dd format.
Defaults are
.Em not
currently checked against type limits (i.e., e-mail form or string
length).
.It Cm limit Ar limit_op limit_val
Used when generating validation functions.
Not available for
.Cm enum ,
.Cm bits ,
or
.Cm struct .
If there are multiple statements, all of them must validate.
The
.Ar limit_op
argument consists of an operator the
.Ar limit_val
is checked against.
Available operators are
.Ar ge ,
.Ar le ,
.Ar gt ,
.Ar lt ,
and
.Ar eq .
Respectively, these mean the field should be greater than or equal to,
less than or equal to, greater than, less than, or equal to the given
value.
If the field type is
.Cm text ,
.Cm email ,
.Cm password ,
or
.Cm blob ,
this refers to the string (or binary) length in bytes.
For numeric types, it's the value itself.
The given value must match the field type: an integer (which may be
signed) for integers, integer or real-valued for real, or a positive
integer for lengths.
Duplicate limit operator-value pairs are not permitted.
Limits are not checked for for sanity, for example, non-overlapping
ranges, but this behaviour is expected to change.
.It Cm noexport
Never exported using the JSON interface.
This is useful for sensitive internal information.
Fields with type
.Cm password
are never exported by default.
.It Cm null
Accepts null SQL values.
A
.Cm rowid
field may not also be
.Cm null .
.It Cm rowid
The field is an SQL primary key.
This is only available for the
.Cm int
type and may only appear for one field in a given structure.
.It Cm unique
Has a unique SQL column value.
It's redundant (but harmless) to specify this alongside
.Cm rowid .
.El
.Pp
A field declaration may consist of any number of
.Cm typeinfo
statements.
.Pp
A typical set of fields for a web application user in a database may
consist of the following.
In this example, the
.Li email
is unique,
.Li name
must be of non-zero length,
.Li cookie
is an internal value never exported (using the
.Cm default
keyword implies this was added later in development, such that old
records have a value of zero while new records are non-zero), and
.Li id
is the unique identifier.
The user references an parent by its
.Li id .
If the parent is deleted, the reference is nullified.
.Bd -literal -offset indent
struct user {
  field parentid:user.id int null actdel nullify
    comment "Parent or null if there is no parent.";
  field name text limit gt 0 limit lt 128
    comment "User's full name.";
  field cookie int noexport default 0 limit lt 0
    comment "A secret cookie (if zero, added
             after secret cookie functionality).";
  field password password;
  field email email unique
    comment "User's unique e-mail address.";
  field ctime epoch
    comment "When the user was added to the database.";
  field id int rowid noexport
    comment "Internal unique identifier.";
};
.Ed
.Ss Comments
A comment is a string literal describing most any component.
Comments are part of the document structure and are usually passed to
output formatters to describe a component.
For example, a structure may be described as follows:
.Bd -literal -offset indent
struct foo {
  field name text;
  comment "A foo widget.";
};
.Ed
.Pp
There's currently no structure imposed on comments: they are interpreted
as opaque text and passed into the frontend.
The only exception is that CRLF are normalised as LF, so sequences of
.Li \er\en
are converted to simply
.Li \en .
.Pp
Components may only have a single comment statement.
An empty comment is still considered to be a valid comment.
.Ss Queries
Query data with the
.Cm search
keyword to return an individual row (i.e., on a unique column or with a
.Cm limit
of one),
.Cm count
for the number of returned rows,
.Cm list
for retrieving multiple results in an array, or
.Cm iterate
for iterating over each result as it's returned.
.Pp
Queries usually specify fields and may be followed by parameters:
.Bd -literal -offset indent
"struct" name "{"
  [ query [term ["," term]*]? [":" [parms]* ]? ";" ]*
"};"
.Ed
.Pp
The term consists of the possibly-nested field names to search for and
an optional operator.
(Searchers of type
.Cm search
require at least one field.)
Nested fields are in dotted-notation:
.Bd -literal -offset indent
[structure "."]*field [operator]?
.Ed
.Pp
This would produce functions searching the field
.Qq field
within the
.Cm struct
structures as listed.
The following operators may be used:
.Bl -tag -width Ds -offset indent
.It Cm and , or
Logical AND
.Pq \&&
and logical OR
.Pq \&| ,
respectively.
Only available for
.Cm bit ,
.Cm bits ,
and
.Cm int
types.
.It Cm eq , neq , streq , strneq
Equality or non-equality binary operator.
The
.Cm eq
operator is the default.
The
.Cm streq
and
.Cm strneq
variants operate the same except for on passwords, where they compare
directly to the password hash instead of the password value.
.It Cm lt , gt
Less than or greater than binary operators.
For text, the comparison is lexical; otherwise, it is by value.
.It Cm le , ge
Less than/equality or greater than/equality binary operators.
For text, the comparison is lexical; otherwise, it is by value.
.It Cm like
The LIKE SQL operator.
This only applies to
.Cm text
and
.Cm email
fields.
.It Cm isnull , notnull
Unary operator to check whether the field is null or not null.
.El
.Pp
Comparisons against a database
.Dv NULL
value always fail.
If
.Dv NULL
is passed as a pointer value, comparison always fails as well.
.Pp
The
.Cm password
field does not accept any operators but
.Cm isnull ,
.Cm notnull ,
.Cm eq ,
.Cm neq ,
.Cm streq ,
and
.Cm strneq .
If the query is a
.Cm count ,
it further does not accept
.Cm eq
or
.Cm neq .
.Pp
The search parameters are a series of key-value pairs.
In each of these, terms are all in dotted-notation and may represent
nested columns.
.Bl -tag -width Ds -offset indent
.It Cm comment Ar string_literal
Documents the query using the quoted string.
.It Cm distinct Op Ar ["." | term]
Return only distinct rows of the sub-structure indicated by
.Ar term ,
or if only a period
.Pq Dq \&. ,
the current structure.
This does not work with
.Cm null
sub-structures.
It is also not possible to test
.Cm eq
or
.Cm neq
for
.Cm password
types in these queries.
Use
.Cm grouprow
for individual columns: the
.Cm distinct
keyword works for an entire row.
.It Cm grouprow Ar field ["." field]*
Groups results by the given column.
This collapses all rows with the same value for the given column into a
single row with the choice of row being determined by
.Cm maxrow
or
.Cm minrow .
It may not be a
.Cm null
column, or a
.Cm password
or
.Cm struct
type.
.It Cm limit Ar limitval ["," offsetval]?
A value >0 that limits the number of returned results.
By default, there is no limit.
This can be used in a
.Cm search
singleton result statement as a way to limit non-unique results to a
single result.
If followed by a comma, the next term is used to offset the query.
This is usually used to page through results.
.It Cm maxrow | minrow Ar field ["." field]*
When grouping rows with
.Cm grouprow ,
identify how rows are collapsed with either the
maximum or minimum value, respectively, of the given column
in the set of grouped rows.
This calculation is lexicographic for strings or blobs, and numeric for
numbers.
The column may not be the same as the grouping column.
It also may not be a
.Cm null
column, or a
.Cm struct
or
.Cm password
type.
.It Cm name Ar searchname
A identifier used in the C API for the search function.
This must be unique within a structure.
.It Cm order Ar term [type]? ["," term [type]?]*
Result ordering.
Each term may be followed by an order direction:
.Cm asc
for ascending (the default) and
.Cm desc
for descending.
Result ordering is applied from left-to-right.
.El
.Pp
If you're searching (in any way) on a
.Cm password
field, the field is omitted from the initial search, then hash-verified
after being extracted from the database.
Thus, this doesn't have the same performance as a normal search.
.Pp
The following are simple web application queries:
.Bd -literal -offset indent
struct user {
  field email email unique;
  field password password;
  field mtime epoch null
    comment "Null if not logged in.";
  field id int rowid;
  search email, password: name creds;
  iterate mtime notnull: name recent order mtime desc limit 20
    comment "Last 20 logins.";
};
.Ed
.Pp
The advanced grouping is appropriate when selecting as follows.
It assumes a user structure such as defined as in the above example.
.Bd -literal -offset indent
struct perm {
  field userid user.id;
  field ctime epoch;
  iterate: grouprow userid maxrow ctime name newest
    comment "Newest permission for each user.";
};
.Ed
.Ss Roles
Limit role access with the
.Cm roles
keyword as follows:
.Bd -literal -offset indent
"struct" name "{"
  [ "roles" role ["," role]* "{" roletype [name]? "};" ]*
"};"
.Ed
.Pp
The
.Cm role
is a list of roles as defined in the top-level block, or one of the
reserved roles but for
.Cm none ,
which can never be assigned.
The role may be one of the following types:
.Bl -tag -width Ds -offset indent
.It Cm all
A special type referring to all function types.
.It Cm delete Ar name
The named delete operation.
.It Cm insert
The insert operation.
.It Cm iterate Ar name
The named iterate operation.
.It Cm list Ar name
The named list operation.
.It Cm noexport Op Ar name
Do not export the field
.Ar name
via the JSON export routines.
If no name is given, don't export any fields.
.It Cm search Ar name
The named search operation.
.It Cm update Ar name
The name update operation.
.El
.Pp
To refer to an operation, use its
.Cm name .
The only way to refer to un-named operations is to use
.Cm all ,
which refers to all operations except
.Cm noexport .
.Bd -literal -offset indent
roles { role loggedin; };
struct user {
  field secret int;
  field id int rowid;
  insert;
  search id: name ident;
  roles all { search id; };
  roles default { noexport secret; };
  roles loggedin { insert; };
};
.Ed
.Pp
The example permits logged-in operators to insert new rows, and both the
default and logged-in roles to search for them.
However, the secret variable is only exported to logged-in users.
.Pp
If, during run-time, the current role is not a subtype (inclusive) of
the given role for an operation, the application is immediately
terminated.
.Ss Updates
Data modifiers.
These begin with the
.Cm update ,
.Cm delete ,
or
.Cm insert
keyword.
By default, there are no update, delete, or insert operations defined.
The syntax is as follows:
.Bd -literal -offset indent
"struct" name "{"
  [ "update" [mflds]* [":" [cflds]* [":" [parms]* ]? ]? ";" ]*
  [ "delete" [cflds]* [":" [parms]* ]? ";" ]*
  [ "insert" ";" ]?
"};"
.Ed
.Pp
Both
.Cm mflds
and
.Cm cflds
are sequences of comma-separated non-meta fields in the current
structure followed by operators.
The former refers to the fields that will be modified; the latter refers
to fields that will act as constraints to which data is modified.
.Pp
The
.Cm delete
statement does not accept fields to modify.
If
.Cm update
does not have fields to modify, all fields will be modified using the
default modifier.
Lastly,
.Cm insert
accepts no fields at all: all fields (except for row identifiers) are
included in the insert operations.
.Pp
Fields have the following operators:
.Bd -literal -offset indent
mflds :== mfld [modify_operator]?
cflds :== cfld [constraint_operator]?
.Ed
.Pp
The fields in
.Cm mflds
accept an optional modifier operation:
.Bl -tag -width Ds -offset indent
.It Cm concat
String concatenate the current field by a given value (x = x || ?).
.It Cm dec
Decrement the current field by a given value (x = x - ?).
.It Cm inc
Increment the current field by a given value (x = x + ?).
.It Cm set , strset
Default behaviour of setting to a value (x = ?).
If the field is a password,
.Cm strset
sets to the raw value instead of hashing beforehand.
.El
.Pp
The fields in
.Cm cflds
accept an optional operator type as described in
.Sx Queries .
Fields of type
.Cm password
are limited to the
.Cm streq
and
.Cm strneq
operators.
.Pp
The
.Cm parms
are an optional series of key-value pairs consisting of the following:
.Bd -literal -offset indent
"comment" string_literal
"name" name
.Ed
.Pp
The
.Cm name
sets a unique name for the generated function, while
.Cm comment
is used for the API comments.
.Ss Uniques
While individual fields may be marked
.Cm unique
on a per-column basis, multiple-column unique constraints may be
specified with the
.Cm unique
structure-level keyword.
The syntax is as follows:
.Bd -literal -offset indent
"unique" field ["," field]+ ";"
.Ed
.Pp
Each
.Cm field
must be in the local structure, and must be non-meta types.
There must be at least two fields in the statement.
There can be only one unique statement per combination of fields (in any
order).
.Pp
For example, consider a request for something involving two parties,
where the pair requesting must be unique.
.Bd -literal -offset indent
struct request {
  field userid:user.id int;
  field ownerid:user.id int;
  unique userid, ownerid;
};
.Ed
.Pp
This stipulates that adding the same pair will result in a constraint
failure.
.Sh TYPES
To provide more strong typing for data,
.Nm
provides enumerations and bit-field types.
These are used only for validating data input.
.Ss Enumerations
Enumerations constrain an
.Cm int
field type to a specific set of constant values.
They are defined as follows:
.Bd -literal -offset indent
"enum" enumname "{"
  [ "comment" string_literal ";" ]?
  [ "item" name [value]? [parms]* ";" ]+
  [ "isnull" label ";" ]?
"};"
.Ed
.Pp
For example,
.Bd -literal -offset indent
enum enumname {
  item "val1" 1 jslabel "Value one";
  isnull jslabel "Not given";
};
.Ed
.Pp
The enumeration name must be unique among all enumerations, bitfields,
and structures.
.Pp
Items define enumeration item names, their constant values (if set), and
documentation.
Each item's
.Cm name
must be unique within an enumeration.
The
.Cm value
is the named constant's value expressed as an integer.
It must also be unique within the enumeration object.
It may not be the maximum or minimum 32-bit signed integer.
If not specified, it is assigned as one more than the maximum of the
assigned values or zero, whichever is larger.
Automatic assignment is linear and in the order specified in the
configuration.
Assigned values may also not be the maximum or minimum 32-bit signed
integer.
Parameters may be any of the following:
.Bd -literal -offset indent
"comment" string_literal
label
.Ed
.Pp
The item's
.Cm comment
is used to document the field, while its label
.Pq see Sx Labels
is used only for formatting output.
The
.Cm isnull
label is used for labelling fields evaluating to
.Cm null .
.Pp
The above enumeration would be used in an example field definition as
follows:
.Bd -literal -offset indent
field foo enum enumname;
.Ed
.Pp
This would constrain validation routines to only recognise values
defined for the enumeration.
.Ss Bitfields
Like enumerations, bitfields constrain an
.Cm int
field type to a bit-wise mask of constant values.
They are defined as follows:
.Bd -literal -offset indent
"bits" bitsname "{"
  [ "comment" string_literal ";" ]?
  [ "item" name bitidx [parms]* ";" ]+
  [ "isunset" label ";" ]?
  [ "isnull" label ";" ]?
"};"
.Ed
.Pp
For example,
.Bd -literal -offset indent
bits bitsname {
  item "bit1" 0 jslabel "Bit one";
  isunset jslabel "No bits";
  isnull jslabel "Not given";
};
.Ed
.Pp
The name must be unique among all enumerations, structures, and other
bitfields.
The term
.Qq bitfield
may be used instead of
.Cm bits ,
for example,
.Bd -literal -offset indent
bitfield bitsname { item "bit1" 0; };
.Ed
.Pp
Items define individual bits, their values, and documentation.
Each item's
.Cm name
must be unique within a bitfield.
The
.Cm value
is the named constant's bit index from zero, so a value of zero refers
to the first bit, one to the second bit, and so on.
It must fall within 0\(en63 inclusive.
Each must be unique within the bitfield.
Parameters may be any of the following:
.Bd -literal -offset indent
"comment" string_literal
label
.Ed
.Pp
The item's
.Cm comment
is used to document the field, while its label
.Pq see Sx Labels
is used only for formatting output.
.Pp
The above bitfield would be used in an example field definition as
follows:
.Bd -literal -offset indent
field foo bits bitsname;
.Ed
.Pp
The bitfield's
.Cm comment
is passed into the output media, the
.Cm isunset
statement serves to provide a label
.Pq see Sx Labels
for when no bits are set (i.e., the field evaluates to zero), and
.Cm isnull
is the same except for when no data is given, i.e., the field is
.Cm null .
.Ss Labels
Labels specify how
.Cm bits
and
.Cm enum
types and their items may be described by a front-end formatter such as
.Xr ort-javascript 1 .
That is, while the string value of a
.Cm struct
item describes itself, an
.Cm enum
maps to a numeric value that needs to be translated into a meaningful
format.
Labels export string representations of the internal numeric value to
the front-end formatters.
.Pp
The syntax is as follows:
.Bd -literal -offset indent
"jslabel" ["." lang]? quoted_string
.Ed
.Pp
The
.Cm lang
token is usually an ISO 639-1 code, but may be any identifier.
It is case insensitive.
If the
.Cm lang
is not specified, the label is considered to be the default label.
.Pp
If a label is not specified for a given language, it inherits the
default label.
If the default label is not provided, it is an empty string.
There is no restriction to labels except that they are non-empty.
.Pp
Only one label may be specified per language, or one default label, per
component.
.Sh ROLES
Full role-based access control is available in
.Nm
when a top-level
.Cm roles
block is defined.
.Bd -literal -offset indent
"roles" "{"
   [ "role" name [parms] ["{" "role" name... ";" "}"]* ";" ]*
"};"
.Ed
.Pp
This nested structure defines the role tree.
Roles descendent of roles are called sub-roles.
Role names are case insensitive and must be unique.
.Pp
By defining
.Cm roles ,
even if left empty, the system will switch into default-deny access
control mode, and each function in
.Sx Structures
must be associated with one or more roles to be used.
.Pp
There are three reserved roles:
.Cm default ,
.Cm none ,
and
.Cm all .
These may not be specified in the
.Cm roles
statement.
The first may be used for the initial state of the system (before a role
has been explicitly assigned), the second refers to the empty role that
can do nothing, and the third contains all explicitly-defined roles.
.Pp
Each role may be associated with parameters limited to:
.Bd -literal -offset indent
"role" name ["comment" quoted_string]?
.Ed
.Pp
The
.Cm comment
field is only produced for role documentation.
.Sh EXAMPLES
A trivial example is as follows:
.Bd -literal -offset indente
struct user {
  field name text;
  field id int rowid;
  comment "A regular user.";
};

struct session {
  field user struct userid;
  field userid:user.id comment "Associated user.";
  field token int comment "Random cookie.";
  field ctime epoch comment "Creation time.";
  field id int rowid;
  comment "Authenticated session.";
};
.Ed
.Pp
This generates two C structures,
.Li user
and
.Li session ,
consisting of the given fields.
The
.Li session
structure contains a
.Li struct user
as well; thus, there is a declarative order that
.Xr ort 1
enforces when writing out structures.
.Pp
The SQL interface, when fetching a
.Li struct session ,
will employ an
.Li INNER JOIN
over the user identifier and session
.Li userid
field.
.Sh SEE ALSO
.Xr ort 1
.\" .Sh STANDARDS
.\" .Sh HISTORY
.\" .Sh AUTHORS
.\" .Sh CAVEATS
.\" .Sh BUGS
