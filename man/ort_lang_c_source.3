.\"	$Id$
.\"
.\" Copyright (c) 2020 Kristaps Dzonsons <kristaps@bsd.lv>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate$
.Dt ORT_LANG_C_SOURCE 3
.Os
.Sh NAME
.Nm ort_lang_c_source
.Nd generate C source from openradtool configuration
.Sh LIBRARY
.Lb libort-lang-c
.Sh SYNOPSIS
.In sys/queue.h
.In stdio.h
.In ort.h
.In ort-lang-c.h
.Ft int
.Fo ort_lang_c_source
.Fa "const struct ort_lang_c *args"
.Fa "const struct config *cfg"
.Fa "FILE *f"
.Fc
.Sh DESCRIPTION
Outputs a C source file from the parsed configuration
.Fa cfg
to
.Fa f
with the parameters in
.Fa args .
.Em This function interface is likely to change.
The header implemented by these sources is usually generated by
.Xr ort_lang_c_header 3 .
The arguments recgnised in
.Fa args
are as follows:
.Bl -tag -width Ds -offset indent
.It Va const char *header
If not
.Dv NULL ,
a comma-separated list of non-system header files to include.
White-space surrounding the commas is discarded.
.It Va unsigned int flags
The bit-field of components to output.
Possible values are described in the next section.
.It Va unsigned int includes
A list of components defined in the header files in
.Va header ,
but not generated with
.Va flags .
This allows for the correct depending headers to be generated.
Possible values are described in the next section.
.It Va const char *ext_jsmn
The JSMN source file required for portability.
.El
.Pp
The following components are output if specified:
.Bl -tag -width Ds -offset indent
.It Dv ORT_LANG_C_JSON_KCGI
Functions for outputting content as JSON objects.
Uses
.Xr kcgijson 3
to manage the JSON encoding and output.
.It Dv ORT_LANG_C_JSON_JSMN
Functions for parsing JSON objects into content.
.It Dv ORT_LANG_C_VALID_KCGI
Functions for validating input from a
.Xr kcgi 3
context.
.It Dv ORT_LANG_C_DB_SQLBOX
Functions for manipulating the database with
.Xr sqlbox 3 .
.El
.Pp
The generated content is in ISO C.
.\" The following requests should be uncommented and used where appropriate.
.\" .Sh CONTEXT
.\" For section 9 functions only.
.Sh RETURN VALUES
Returns zero on failure, non-zero on success.
.\" For sections 2, 3, and 9 function return values only.
.\" .Sh ENVIRONMENT
.\" For sections 1, 6, 7, and 8 only.
.\" .Sh FILES
.\" .Sh EXIT STATUS
.\" For sections 1, 6, and 8 only.
.Sh EXAMPLES
A simple scenario of creating a configuration, parsing standard input,
linking, then performing some task is as follows.
It assumes
.Pa db.h
has been generated by
.Xr ort_lang_c_header 3 .
.Bd -literal -offset indent
struct config *cfg;
struct ort_lang_c args;

memset(&args, 0, sizeof(struct ort_lang_c));
args.header = "db.h";
args.flags = ORT_LANG_C_DB_SQLBOX;

if ((cfg = ort_config_alloc()) == NULL)
  err(1, NULL);
if (!ort_parse_file(cfg, stdin, "<stdin>"))
  errx(1, "failed parsing");
if (!ort_parse_close(cfg))
  errx(1, "failed linking");
if (!ort_lang_c_source(&args, cfg, stdout))
  errx(1, "failed output");

ort_config_free(cfg);
.Ed
.\" .Sh DIAGNOSTICS
.\" For sections 1, 4, 6, 7, 8, and 9 printf/stderr messages only.
.\" .Sh ERRORS
.\" For sections 2, 3, 4, and 9 errno settings only.
.Sh SEE ALSO
.Xr ort 3 ,
.Xr ort_lang_c_header 3 ,
.Xr ort_lang_c_manpage 3
.\" .Sh STANDARDS
.\" .Sh HISTORY
.\" .Sh AUTHORS
.\" .Sh CAVEATS
.\" .Sh BUGS
