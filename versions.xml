<?xml version="1.0" encoding="UTF-8" ?>
<!-- vim: set tw=100: -->
<articles>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.14.0</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2021-10-25">2021-10-25</time>
		</header>
		<aside>
			<p>
				No longer use basic
				<a href="https://man.openbsd.org/crypt.3">crypt(3)</a>
				for password encryption.  Now require
				<a href="https://man.openbsd.org/crypt_newhash.3">crypt_newhash(3)</a>
				(or function with similar signature)
				and family, which use Blowfish encryption.
				This isn't available by default on Linux, but is available in
				<a href="https://github.com/kristapsdz/oconfigure">oconfigure</a>,
				which is now used for regression tests of said functionality.
			</p>
			<p>
				No longer bundle a copy of <code>b64_ntop</code>.
				This is part of most systems, and
				<a href="https://github.com/kristapsdz/oconfigure">oconfigure</a>
				(or equivalent) may be used for compatible functions.
			</p>
			<p>
				Various fixes for NodeJS, <a href="ort-nodejs.1.html">ort-nodejs(1)</a>, from
				<a href="https://github.com/validatorjs/validator.js/pull/2257">pull/2257</a>.
				This is still experimental and lacks validation.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.14.0</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2021-10-25">2021-10-25</time>
		</header>
		<aside>
			<p>
				Add initial <a href="https://rust-lang.org">Rust</a> output.
				This is still experimental and lacks validation.
			</p>
			<p>
				Fix how <a href="ort-nodejs.1.html">ort-nodejs(1)</a> was handling
				passwords.  Searching on password fields would prior to this have
				failed unilaterally.  Password operations (querying, updating, etc.)
				are now all enforced by regression tests.
			</p>
			<p>
				Improve the <a href="ort-nodejs.1.html">ort-nodejs(1)</a> exception
				handling for inserts and updates.  It now passes through specific
				constraint errors instead of catching the entire exception.
				Moreover, the exception handler is now documented in the manual, as
				its documentation is very spotty in
				<a href="https://www.npmjs.com/package/better-sqlite3">better-sqlite3</a>.
				All of these are now checked in the regression suite.
			</p>
			<p>
				Fix how
				<a href="ort-c-source.1.html">ort-c-source(1)</a> would produce
				invalid C code for nested null references.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.13.9</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2021-09-27">2021-09-27</time>
		</header>
		<aside>
			<p>
				Add epoch types (<code>date</code> and <code>epoch</code>) to the
				safe typing regime.  This does not change non-safe-typing
				applications except to add aliases.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.13.8</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2021-07-27">2021-07-27</time>
		</header>
		<aside>
			<p>
				Tighten up code produced by
				<a href="ort-c-source.1.html">ort-c-source(1)</a>
				in having the correct type for some enumeration and casting to avoid
				spurrious warnings raised by <strong>-Weverything</strong>.
			</p>
			<p>
				Fix output of 
				<a href="ort-javascript.1.html">ort-javascript(1)</a> when using the 
				<code>-value-checked</code> and <code>-value-selected</code> classes.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.13.7</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2021-07-18">2021-07-18</time>
		</header>
		<aside>
			<p>
				<strong>SQL change</strong>: indexes are now output as 
				<code>unique_strct__field1_field2</code> instead of
				<code>unique_field1_field2</code>.
				This prevents multiple structures with the same unique field(s) from
				having the same index name.
				This only changes the name of the index, so existing indexes won't
				be affected.  However, if removing a unique statement, the
				corresponding index won't be removed as the name won't be found.
				New indexes won't clobber any existing ones because of the prefix
				style.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.13.6</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2021-07-17">2021-07-17</time>
		</header>
		<aside>
			<p>
				<strong>Change parser behaviour</strong>: no longer allow for
				queries of the same name within a structure.  Prior to this, the
				rule was that query names must be unique within the query type
				(e.g., <code>iterate</code>).
			</p>
			<p>
				The reason for this change is to reflect how the code actually
				operates a bit better.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.13.5</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2021-07-12">2021-07-12</time>
		</header>
		<aside>
			<p>
				Export bitfields as enumerations in
				<a href="ort-nodejs.1.html">ort-nodejs(1)</a>.  This makes the
				Node.js output similar to the C output.  While here, perform various
				cleanups to the documentation.
			</p>
			<p>
				Add more validation for integer types in
				<a href="ort-nodejs.1.html">ort-nodejs(1)</a> validator routines,
				and also have the <code>blob</code> field return a Buffer.  Make
				sure that high-value bit-fields (e.g., all bits set) aren't
				discarded by the SQLite3 module with range errors: properly fix them
				into their signed format before passing into the database.
			</p>
			<p>
				Lastly, use <code>bigint</code> instead of <code>BigInt</code> in
				<a href="ort-nodejs.1.html">ort-nodejs(1)</a> output.
				Fix that the export functions were trying to <code>new</code> a
				string when converting from a <code>Buffer</code> (harmless).  Fix
				type warnings about <code>lastInsertRowid</code> by converting to a
				<code>string</code> before converting it into a <code>BigInt</code>.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.13.4</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2021-07-08">2021-07-08</time>
		</header>
		<aside>
			<p>
				Considerably improve the documentation of the internal Long
				implementation, which is a utility for the output of
				<a href="ort-javascript.1.html">ort-javascript(1)</a> to convert
				and manipulate 64-bit integers without necessarily having BigNum
				support in the browser.  Also make some small fixes to the code.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.13.3</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2021-06-27">2021-06-27</time>
		</header>
		<aside>
			<p>
				Introduce <q>safe typing</q> to the output of
				<a href="ort-c-header.1.html">ort-c-header(1)</a>.
				This affects the API for both data types and operations, and
				accounts for the common error of type mis-assignment.
			</p>
			<p>
				For example, with a structure <code>user</code> with a row
				identifier <code>id</code> and originator foreign key
				<code>ouserid</code>, searching for the originator user erroneously
				using <code>id</code>.  In prior versions, both <code>id</code> and
				<code>ouserid</code> were <code>int64_t</code>, which made it easy
				to use one instead of the other.  With safe typing, two new types of
				<code>user_id</code> and <code>user_ouserid</code> exist, and may
				not be set to each other without using setter and getter functions.
			</p>
			<p>
				By default, safe typing is not enabled and types may be mixed.  To
				ease transitioning between safe and un-safe types, the setter and
				getter functions are emitted for both forms, and (for example)
				<code>user_id</code> is also emitted for un-safe typing as a simple
				alias for <code>int64_t</code>, so existing code need not be
				modified.
			</p>
			<p>
				Safe types are still a work in progress, with the implementation not
				quite finalised until the next minor release.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.13.2</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2021-06-09">2021-06-09</time>
		</header>
		<aside>
			<p>
				Minimal change to the <a href="ort.3.html">ort(3)</a> API in
				exporting the full chain of fields in each sub-field referencing
				component of searches (distinct, aggregate, etc.).  This is
				informative, and currently only used in
				<a href="ort-json.1.html">ort-json(1)</a> and
				<a href="ort_lang_json.3.html">ort_lang_json(3)</a>.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.13.1</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2021-06-08">2021-06-08</time>
		</header>
		<aside>
			<p>
				Minimal change to the <a href="ort.3.html">ort(3)</a> API in
				exporting the full chain of fields in each query component.
				This is informative, and currently only used in
				<a href="ort-json.1.html">ort-json(1)</a> and
				<a href="ort_lang_json.3.html">ort_lang_json(3)</a>.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.13.0</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2021-05-21">2021-05-21</time>
		</header>
		<aside>
			<p>
				Change the way that
				<a href="ort-sqldiff.1.html">ort-sqldiff(1)</a> handles unique
				fields and unique tuples.  Prior to this, these would be output
				directly into the tables as <code>UNIQUE</code> statements, which
				unfortunately can't be modified with SQLite after creation.
			</p>
			<p>
				Now, <a href="ort-sqldiff.1.html">ort-sqldiff(1)</a> outputs
				<code>UNIQUE INDEX</code> statements for these components.  These
				can be added and dropped at will, making migration between databases
				much easier.
			</p>
			<p>
				This requires a minor version bump and makes
				<a href="ort-sqldiff.1.html">ort-sqldiff(1)</a> incompatible between
				versions, as existing <code>UNIQUE</code> statements may not be shed.
				Existing databases will need to be dumped and re-inserted.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.12.12</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2021-05-17">2021-05-17</time>
		</header>
		<aside>
			<p>
				Add ability to override the namespace name generated by
				<a href="ort_lang_javascript.3.html">ort_lang_javascript(3)</a>.
				Distribute a <i>ort-version.h</i> header with version information.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.12.11</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2021-05-13">2021-05-13</time>
		</header>
		<aside>
			<p>
				Add ability to specify the namespace output by
				<a href="ort_lang_javascript.3.html">ort_lang_javascript(3)</a> as 
				exported.
				Distribute a <i>ort-version.h</i> header with version information.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.12.10</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2021-05-06">2021-05-06</time>
		</header>
		<aside>
			<p>
				Add significant regression tests to the Node.js validators,
				normalising their behaviour in some cases.
				Add ability to break apart
				<a href="ort-nodejs.1.html">ort-nodejs(1)</a> output into multiple files.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.12.9</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2021-05-04">2021-05-04</time>
		</header>
		<aside>
			<p>
				Add validation routines to
				<a href="ort-nodejs.1.html">ort-nodejs(1)</a> and
				<a href="ort_lang_nodejs.3.html">ort_lang_nodejs(3)</a>.
				These use the
				<a href="https://github.com/validatorjs/validator.js">validator.js</a>
				system for validation.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.12.8</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2021-04-29">2021-04-29</time>
		</header>
		<aside>
			<p>
				Re-write internals of auditing system.  These now use the internal
				<a href="ort_audit.3.html">ort_audit(3)</a> function.  The output of
				<a href="ort-audit.1.html">ort-audit(1)</a> has been formalised and
				is now documented (it differs from the prior output).
			</p>
			<p>
				Formalise the output of
				<a href="ort_audit_json.1.html">ort-audit-json(1)</a> and include
				the <code>count</code> operation in its output.
				For coherence with the program name, output straight-up JSON and
				have a flag <b>-s</b> for wrapping the object in JavaScript.
			</p>
			<p>
				Rename <code>ort_diff_free</code> to 
				<a href="ort_diffq_free.3.html">ort_diffq_free(3)</a> for
				consistency.
			</p>
			<p>
				Remove <code>ort-audit-gv</code>, which isn't really useful.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.12.7</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2021-04-17">2021-04-17</time>
		</header>
		<aside>
			<p>
				Add callback mechanism to <i>ort-json.ts</i>.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.12.6</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2021-04-10">2021-04-10</time>
		</header>
		<aside>
			<p>
				Release <a href="ort-c-manpage.1.html">>ort-c-manpage(1)</a> and its libray bits,
				<a href="ort_lang_c_manpage.3.html">>ort_lang_c_manpage(3)</a>.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.12.5</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2021-04-02">2021-04-02</time>
		</header>
		<aside>
			<p>
				Add some new methods to the generated <code>ort.Long</code> output with
				<a href="ort-javascript.1.html">ort-javascript(1)</a> to make it
				easier for front-ends to work with 64-bit integers.  Add regression
				tests for these.
			</p>
			<p>
				Start work on a <code>ort-c-manpage</code> (not yet released) that
				will allow a C API to be output as a
				<a href="https://man.openbsd.org/mdoc.7">mdoc(7)</a> document.
				I personally use this because it makes scanning for functions faster
				than looking in the header files.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.12.4</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2021-03-28">2021-03-28</time>
		</header>
		<aside>
			<p>
				Regression tests for internal JavaScript (<code>ortJson.Long</code>)
				functions.  No change to code, but adding <code>or</code> and some
				documentation.  Also relax some needless constraints in
				<i>ort-json.ts</i>.
			</p>
			<p>
				Fix a bug in <a href="ort-sqldiff.1.html">ort-sqldiff(1)</a> where
				<code>struct</code> fields were considered SQL columns.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.12.1</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2021-03-24">2021-03-24</time>
		</header>
		<aside>
			<p>
				A number of improvements to the <i>ort-json.ts</i> machinery.
				Probably not going to change any normal usage.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.12.0</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2021-03-20">2021-03-20</time>
		</header>
		<aside>
			<p>
				Introduce a significant change where names in
				<a href="ort.5.html">ort(5)</a> configurations are internally
				converted to lowercase.  This means that all output will use the
				lowercase versions of the read names, which affects APIs.
			</p>
			<p>
				Why is this a good idea?  Largely because it keeps APIs consistent
				with changing (for example) structure names, which is already
				accepted as <q>not a change</q> because structure names are case
				insensitive.
			</p>
			<p>
				It also cleans up some inconsistency where some fields (e.g., roles)
				were lowercased already, while most (structure names, field names,
				explicit query naming, etc.) were not.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.11.18</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2021-03-18">2021-03-18</time>
		</header>
		<aside>
			<p>
				Install the manual and package configuration for
				<a href="ort_lang_javsacript.3.html">ort_lang_javascript(3)</a>, 
				which creates TypeScript front-end code.
				Also tighten down role name case insensitivity and fix serialisation
				of empty role objects in <i>ort-json.ts</i>.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.11.16</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2021-03-15">2021-03-15</time>
		</header>
		<aside>
			<p>
				Tiny changes to speed up TypeScript routines.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.11.15</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2021-03-08">2021-03-08</time>
		</header>
		<aside>
			<p>
				Internal API change: pass a <code>msgq</code> directly to the
				<a href="ort_msg.3.html">ort_msg(3)</a> family of functions.
			</p>
			<p>
				Add <a href="ort_lang_sql.3.html">ort_lang_sql(3)</a> for outputting
				the SQL schema.
			</p>
			<p>
				API change: add a <code>msgq</code> to
				<a href="ort_lang_xliff_extract.3.html">ort_lang_xliff_extract(3)</a>,
				<a href="ort_lang_xliff_join.3.html">ort_lang_xliff_join(3)</a>,
				and
				<a href="ort_lang_xliff_update.3.html">ort_lang_xliff_update(3)</a>;
				and make the configuration <code>const</code> when possible.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.11.13</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2021-02-28">2021-02-28</time>
		</header>
		<aside>
			<p>
				Minor fix in handling UTF-8 labels and converting to and from JSON.
				Have <a href="ort-xliff.1.html">ort-xliff(1)</a> properly handle XML
				special characters by on-the-fly encoding and decoding, lifting the
				restriction of not being able to use <q>&lt;</q> in labels.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.11.12</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2021-02-21">2021-02-21</time>
		</header>
		<aside>
			<p>
				Fix parsing and writing of limit/offset pairs.
				Allow parameter-less search statements.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.11.11</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2021-02-13">2021-02-13</time>
		</header>
		<aside>
			<p>
				Enable the exported library for
				<a href="ort_lang_nodejs.3.html">ort_lang_nodejs(3)</a>.
				This is still experimental, however.
			</p>
			<p>
				Fix how null references (a <code>struct</code> to a foreign key that
				might be <code>null</code>) was handled both in the generated C
				source and in node.js output.  Both failed for different reasons.
			</p>
			<p>
				Continued work on <i>ort-json.ts</i>.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.11.10</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2021-01-18">2021-01-18</time>
		</header>
		<aside>
			<p>
				Relax the constraint where overlapping roles applied to the same
				operation would error out.
				Now we merely warn about them.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.11.10</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2021-01-02">2021-01-02</time>
		</header>
		<aside>
			<p>
				Include the ability to convert the JSON representation of a
				configuration as provided by 
				<a href="ort-json.1.html">ort-json(1)</a> back into a
				<a href="ort.5.html">ort(5)</a>.
				This is part of the <i>ort-json.ts</i> file.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.11.9</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2020-12-28">2020-12-28</time>
		</header>
		<aside>
			<p>
				Include a formatter for the JSON representation produced by
				<a href="ort-json.1.html">ort-json(1)</a>.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.11.8</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2020-12-24">2020-12-24</time>
		</header>
		<aside>
			<p>
				Have <a href="ort-diff.1.html">ort-diff(1)</a> return a value based
				upon whether the results are different.
				This makes it behave like
				<a href="https://man.openbsd.org/diff.1">diff(1)</a>.
			</p>
			<p>
				Emit XLIFF content that validates against the <q>strict</q> variant
				of the specification.
				This is now used in internal regression testing.
				All of the XLIFF processing is now well-documented in
				<a href="ort_lang_xliff_extract.3.html">ort_lang_xliff_extract(3)</a>,
				<a href="ort_lang_xliff_join.3.html">ort_lang_xliff_join(3)</a>,
				and
				<a href="ort_lang_xliff_update.3.html">ort_lang_xliff_update(3)</a>.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.11.7</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2020-12-19">2020-12-19</time>
		</header>
		<aside>
			<p>
				Enforce that the <code>default</code> action for <code>actup</code>
				or <code>actdel</code> has either a <code>null</code> field or a
				default.  This prevents the database from defaulting to a
				<code>null</code> value, which may conflict with the configuration
				and thus expectations of the code.
			</p>
			<p>
				Do the same for the <code>nullify</code> action, requiring that the
				field be <code>null</code>.
			</p>
			<p>
				Rename some parts of the <a href="ort-json.1.html">ort-json(1)</a>
				TypeScript definitions file. 
				Add in some forgotten fields to the definitions.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.11.6</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2020-12-17">2020-12-17</time>
		</header>
		<aside>
			<p>
				Make sure that <code>distinct</code> on a
				<code>list</code> or <code>iterate</code> correctly declare the
				required macros in
				<a href="ort-c-header.3.html">ort-c-header(1)</a>.
				Found by the expanded regression suite.
			</p>
			<p>
				Fix how <code>grouprow</code> queries, which use 
				<code>LEFT OUTER JOIN</code>, don't prematurely terminate quoted
				strings.  Found by the expanded regression suite.
			</p>
			<p>
				Fix how empty iterators would cause bad
				<a href="ort-nodejs.1.html">ort-nodejs(1)</a> to be emitted.
			</p>
			<p>
				Internally, convert front-end utilities to properly emit output to a
				passed-in file stream instead of assuming <code>stdout</code>.  This
				way, these may be converted into libraries for use within other systems.
			</p>
			<p>
				Introduce
				<a href="ort-json.1.html">ort-json(1)</a>, via
				<a href="ort_lang_json.3.html">ort_lang_json(3)</a>, which converts
				a configuration into JSON.
				These are still very new, but heavily tested.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.11.4</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2020-12-08">2020-12-08</time>
		</header>
		<aside>
			<p>
				Export changes to the <code>roles</code> statement in
				<a href="ort_diff.3.html">ort_diff(3)</a> field results.
				Also add full support for the <code>insert</code>;
				<code>update</code> and <code>delete</code>; and <code>list</code>,
				<code>search</code>, and <code>iterate</code>.
				This completes full difference coverage.
				All (or near enough) of these differences are encoded in the
				regression suite.
			</p>
			<p>
				While doing all this, push plenty of documentation from the header
				file into
				<a href="ort.3.html">ort(3)</a>.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.11.2</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2020-12-03">2020-12-03</time>
		</header>
		<aside>
			<p>
				Reconsider white-space handling in comments.  Prior to this,
				consecutive white-space collapsed into the <i>first</i> white-space.
				This was a problem for two reasons: first, Markdown and other common
				comment formats recognise multiple newlines to separate blocks.
				More significantly, a CRLF end of line would convert into a blank CR
				(instead of a LF).  Modify the system, thus, to accept comments
				as-is except for CRLF, which is reduced to LF.
				This makes diffing much more consistent as well.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.11.1</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2020-11-22">2020-11-22</time>
		</header>
		<aside>
			<p>
				Continue adding functionality to
				<a href="ort-diff.1.html">ort-diff(1)</a> via
				<a href="ort_diff.3.html">ort_diff(3)</a>.
				No functional changes.
				Enumerations, bit-fields, structure uniques, and structure fields
				are now fully covered by the interface.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.11.0</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2020-11-13">2020-11-13</time>
		</header>
		<aside>
			<p>
				Introduce 
				<a href="ort-diff.1.html">ort-diff(1)</a>, which works off the back of 
				<a href="ort_diff.3.html">ort_diff(3)</a> in producing the semantic
				differences between two configurations.
				This is now being used within
				<a href="ort-sqldiff.1.html">ort-sqldiff(1)</a>, which has been
				considerably simplified.
				The function is still incomplete: it doesn't record all differences.
				So far, it returns enough to be fully used by
				<a href="ort-sqldiff.1.html">ort-sqldiff(1)</a>.
			</p>
			<p>
				While here, fully document all of the transformations possible in
				<a href="ort-sqldiff.1.html">ort-sqldiff(1)</a> and also tighten
				down on some destructive changes (e.g., allowing type changes) in
				prior versions.
			</p>
			<p>
				The new difference engine has introduced a significant number of
				regression tests.
				The documented transformations of the SQL engine are also now
				exhaustively tested in the regression suite.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.10.3</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2020-11-04">2020-11-04</time>
		</header>
		<aside>
			<p>
				Start installing the ort library.
				This includes header, library code, manpages, and a pkgconfig.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.10.2</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2020-08-28">2020-08-28</time>
		</header>
		<aside>
			<p>
				<b>Bug-fix</b>:
				make sure that
				<a href="ort-javascript.1.html">ort-javascript(1)</a> correctly 
				handles numbers and strings when formatting.  This was not caught
				by the regression framework because <code>ts.transpile</code>
				accepts the type-mangling code while <code>tsc</code> does not.
				Fixed and added regression tests that force the issue.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.10.1</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2020-08-27">2020-08-27</time>
		</header>
		<aside>
			<p>
				<b>Bug-fix</b>:
				<a href="ort-c-source.1.html">ort-c-source(1)</a> was not generating
				the internal <code>db_xxxx_fill_r</code> functions in some cases,
				even though required by query functions.
			</p>
			<p>
				Document the <code>db_open_logging</code> function in
				<a href="ort-c-header.1.html">ort-c-header(1)</a>.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.10.0</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2020-08-17">2020-08-17</time>
		</header>
		<aside>
			<p>
				<b>Major change</b>: integer values are now JSON-serialised as
				strings intead of numbers.
				This affects
				<a href="ort-c-header.1.html">ort-c-header(1)</a>'s JSON export
				interface,
				<a href="ort-c-header.1.html">ort-c-header(1)</a>'s JSON import
				interface, and most importantly,
				<a href="ort-javascript.1.html">ort-javascript(1)</a>'s typing of
				integers as <code>string</code> as well as of <code>number</code>.
			</p>
			<p>
				This change completely necessary because of JavaScript's inability
				to parse integers with more than 53 bits and the necessity to handle
				full 64-bit numbers.
				While JSON can accept arbitrary-precision numbers if used purely as
				a transport protocol, it's more portable to just use a string
				encoding.
			</p>
			<p>
				The only user-facing code this might affect is custom callbacks that
				perform numeric operations.
				These functions will now also need to handle string values.
				This is reflected in the TypeScript type annotations, so any current
				numeric operations on values passed to these functions should raise
				errors or at least warnings.
				There is now a <code>ortns.Long</code> class modelled after
				<a href="https://github.com/dcodeIO/Long.js">Long.js</a> that's also
				used internally which can perform 64-bit operations.
			</p>
			<p>
				The code generated by 
				<a href="ort-c-header.1.html">ort-c-header(1)</a> and
				<a href="ort-javascript.1.html">ort-javascript(1)</a> for working
				with deserialised data can handle either string or numeric
				(old-style) values, so new front-ends can work with old back-ends.
				The reverse is not true.
			</p>
			<p>
				While the proper (and simpler) way to store integers in
				<a href="ort-javascript.1.html">ort-javascript(1)</a> would be
				<code>BigInt</code>, this isn't yet standard across browsers, and
				would require alternative encoding during transit anyway (JSON
				doesn't recognise it).  The current implementation is portable
				across all browsers.
			</p>
			<p>
				Also, and without much of an introduction:
				<a href="ort-nodejs.1.html">ort-nodejs(1)</a>.
				This experimental back-end generator builds a
				<a href="https://nodejs.org/en/">Node.js</a> back-end.
				This generates an API very similar to that of
				<a href="ort-c-header.1.html">ort-c-header(1)</a>, making it easy to
				transition between languages.
				For now, it <strong>does not provide comparable security</strong> to
				the C implementation.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.9.1</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2020-08-08">2020-08-08</time>
		</header>
		<aside>
			<p>
				<b>Output change</b>: do not have <b>delete</b> statements return a
				value.
			</p>
			<p>
				<b>Output change</b>: the output of
				<a href="ort-javascript.1.html">ort-javascript(1)</a> is now
				sensitive to fields that are not exported.
				This applies to fully unexported (i.e., those marked with
				<code>noexport</code> or passwords) and having optional fields
				(those not exported per role) to be checked and behaviour if not
				found documented and regression-tested.
			</p>
			<p>
				<b>Output change</b>: full support for binary blobs in
				<a href="ort-javascript.1.html">ort-javascript(1)</a> by using
				base64 encoding throughout.
				Those wishing to use the binary data will need to use custom
				callbacks with (for example) <code>Buffer.from()</code> to convert
				from base64 to binary.
			</p>
			<p>
				Considerable improvements to the output of
				<a href="ort-javascript.1.html">ort-javascript(1)</a> and the
				documentation itself.
				This has no functional change, but introduces more TypeScript idioms
				such as <code>const</code> and <code>readonly</code>.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.9.0</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2020-07-11">2020-07-11</time>
		</header>
		<aside>
			<p>
				<b>Output and configuration change</b>: 
				<a href="ort-javascript.1.html">ort-javascript(1)</a> no longer
				emits the un-documented and hard-coded <q>not given</q> (with the
				hard-coded <q>notgiven</q> class) for labelling null enumeration
				values.
				These are now represented by the <b>isnull</b> label documented in
				<a href="ort.5.html">ort(5)</a>.
				This is similar to bit-fields.
			</p>
			<p>
				<b>Output change</b>:
				<a href="ort-javascript.1.html">ort-javascript(1)</a> no longer
				emits JavaScript&#8212;only TypeScript as if <b>-t</b> were passed.
				This is because straight-up JavaScript is just too unsafe.
				Any consumers of the JavaScript output will now need to use the 
				TypeScript transpiler.
				This necessitates a minor version bump.
				Any future JavaScript features will all be TypeScript.
			</p>
			<p>
				In doing so, use <a href="https://typedoc.org">TypeDoc</a> instead of 
				<a href="https://jsdoc.app">jsdoc</a>.
			</p>
			<p>
				Split out lots of boilerplate code for
				<a href="ort-javascript.1.html">ort-javascript(1)</a> into a file
				pulled in during parse.
				The location of this boilerplate may be set with <b>-S</b>, just
				like for <a href="ort-c-source.1.html">ort-c-source(1)</a>.
				This does not affect the behaviour of generated code.
			</p>
			<p>
				<b>Output change</b>:
				Use <code>checked="checked"</code> instead of 
				<code>checked="true"</code> (same with <code>selected</code>) for
				the <code>-value-checked</code>, <code>-bits-checked</code>, and
				<code>-enum-select</code> class fills generated by
				<a href="ort-javascript.1.html">ort-javascript(1)</a>.
				This is more standards compliant.
			</p>
			<p>
				<b>Output change</b>:
				the undocumented string <q>unset</q> was emitted for bit-fields that
				don't have corresponding labels when formatted.
				It is a documented empty string.
				Also handle missing individual labels and so on.
			</p>
			<p>
				Add a large regression suite to tests for the behaviour documented
				in both <a href="ort-javascript.1.html">ort-javascript(1)</a> and
				the generated documentation.
			</p>
			<p>
				Be more explicit as to why the <q>&gt;</q> character is not allowed
				and further disallow empty labels.
				Clarify the maximum and minimum values for bit-fields and
				enumerations.
				(Lift earlier restriction of 32 bits after testing on a variety of
				machines.)
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.8.16</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2020-06-22">2020-06-22</time>
		</header>
		<aside>
			<p>
				In the documentation, clarify native, meta, and user-defined types.
				Clarify that sub-structure references may not be recursive.
				While there, also add some query examples and clarify the docs
				for distinct and grouping queries.
			</p>
			<p>
				Only accept logical operators on integer and bit types.
			</p>
			<p>
				Allow string and unary operators (and document as such) for
				grouping queries.
			</p>
			<p>
				Limit enumerations to 32-bit values and prevent overflow.
			</p>
			<p>
				When generating validation functions for the C API, don't emit a
				<q>wrapper</q> function if not emitting limiting code&#8212;instead,
				simply use the <a href="https://kristaps.bsd.lv/kcgi">kcgi(3)</a>
				function itself as the validator.
				This saves on superfluous generated code.
			</p>
			<p>
				Don't allow <code>count</code> query type to have password equality
				checks.
				This never worked, but now we explicitly check for it.
			</p>
			<p>
				Don't emit <code>db_xxx_fill_r</code> functions if there are no
				queries that require it.
				This saves on superfluous generated code that would otherwise raise
				warnings during compilation.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.8.15</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2020-06-09">2020-06-09</time>
		</header>
		<aside>
			<p>
				Bug-fix: if errors occur when parsing files with
				<a href="ort-sqldiff.1.html">ort-sqldiff(1)</a>, properly return
				with an error code.
				Earlier, this was not returning an error code.
			</p>
			<p>
				Clarify the <a href="ort-sqldiff.1.html">ort-sqldiff(1)</a>
				documentation with regard to exactly the cases that cause errors.
				Create a regression suite to test for this.
			</p>
			<p>
				Allow for <code>enum</code> fields to have a default type.
				Allow for <code>password</code> fields to accept
				<code>isnull</code> or <code>notnull</code> operations.
			</p>
			<p>
				Remove several fields in <i>ort.h</i> used only by the C front-end,
				such as the capitalised name of structures.  These add moving parts
				with few discernable benefits.
			</p>
			<p>
				Complete removal of <q>resolution</q> fields from <i>ort.h</i>.
				These fields were the superfluous names attached to (for example)
				upgrade references.
				Earlier, these were required because the names were resolved after
				parsing, during the linking phase.
				A new, safer internal API is used instead.
				This effort has resulted in a much cleaner API and a significant
				number of regression tests.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.8.14</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2020-05-18">2020-05-18</time>
		</header>
		<aside>
			<p>
				Bug-fix: the <code>grouprow</code> and associated row operation
				were not being written by <a href="ort.1.html">ort(1)</a>.
			</p>
			<p>
				Bug-fix: the <code>order</code> type was not being written by
				<a href="ort.1.html">ort(1)</a>.
			</p>
			<p>
				Bug-fix: the <code>distinct</code> keyword on the local structure
				was not being printed properly by <a href="ort.1.html">ort(1)</a>.
			</p>
			<p>
				When running <a href="ort-sqldiff.1.html">ort-sqldiff(1)</a>, be
				more selective on which <code>field</code> attribute changes will
				trigger an error.
			</p>
			<p>
				Significant upgrade to the internals: instead of haphazardly
				resolving names to object components (e.g., the field names in
				foreign references), do so in a dedicated pass by way of resolver
				objects.
			</p>
			<p>
				This simplifies the final parsed tree: where before both the name
				and resolved field were part of (for example) an update reference,
				now only the resolved field object exists.
			</p>
			<p>
				In doing so, this has made several structures unnecessary, such as
				<code>struct bref</code>.  This and others like it existed solely to
				carry both the name of the field to resolve <i>and</i> the results
				of that resolution.
			</p>
			<p>
				Many many new regression tests have been added to reflect the checks
				that occur during linking.
			</p>
			<p>
				Other internal APIs and files were moved around for clarity: the
				C-generating files are now prefixed with <q>c</q>, the library no
				longer contains front-end objects, etc.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.8.13</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2020-05-04">2020-05-04</time>
		</header>
		<aside>
			<p>
				When querying with a password entry, having a non-terminal password
				field in the list of search fields would generate an incorrect
				ordering when assigning to SQL parameters.
				This has been fixed and the code (and documentation) cleaned up and
				simplified.
			</p>
			<p>
				Allow unary password constraint operations in update queries.
			</p>
			<p>
				Fix how password <code>null</code> fields are checked for.
				While there, consider how <code>NULL</code> values passed as the
				password are processed.
				Before they were not at all.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.8.10</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2020-03-30">2020-03-30</time>
		</header>
		<aside>
			<p>
				Fix where auto-valued enumerations weren't auto-value-ing.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.8.8</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2020-03-28">2020-03-28</time>
		</header>
		<aside>
			<p>
				Enable and verify portability in the generated source code for a
				large number of systems.
				This made possible by the latest version of
				<a href="https://github.com/kristapsdz/oconfigure">oconfigure</a>.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.8.7</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2020-03-15">2020-03-15</time>
		</header>
		<aside>
			<p>
				Significant internal restructuring for clarity.
				Enable <code>grouprow</code>, which groups rows by column then
				reduces them to a single row with a <code>minrow</code> or
				<code>maxrow</code>.
				At this time, this is limited to a single grouping column and
				maximum/minimum column.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.8.6</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2020-03-05">2020-03-05</time>
		</header>
		<aside>
			<p>
				Use <a href="https://man.openbsd.org/pkg-config">pkg-config</a> in
				all examples, for simplicity.
				Update <a href="https://github.com/kristapsdz/oconfigure">oconfigure</a>.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.8.5</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2020-02-16">2020-02-16</time>
		</header>
		<aside>
			<p>
				<strong>Possibly API-breaking changes</strong>: update functions
				declared without constraints no longer emit a superfluous
				<code>by</code> in the generated function names.  That is,
				<code>update [xxx];</code> will no longer append a hanging
				<code>_by</code> to the function name.
			</p>
			<p>
				Anonymous update functions (i.e., without a <code>name</code>) now
				have their modification type emitted in the function name.
				This is to prevent name collisions from, e.g., 
				<code>update foo inc</code> and <code>update foo dec</code>.
			</p>
			<p>
				Have the <code>strset</code> keyword for update modifiers set the
				raw password value instead of hashing.
			</p>
			<p>
				Bring up to date with latest 
				<a href="https://github.com/kristapsdz/oconfigure">oconfigure</a>.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.8.2</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2019-11-24">2019-11-24</time>
		</header>
		<aside>
			<p>
				Have passwords accept both <code>eq</code> and <code>neq</code>
				search operators.
			</p>
			<p>
				Following the database library switch in release 0.8.0, update
				functions no longer return &lt;0 on error, as error conditions in
				the database trigger program exit.  The precise return value is now
				zero on failure, non-zero on success; however, for backwards
				compatibility, &lt;0 shall not be returned so these code-paths are
				not followed.
			</p>
			<p>
				Add <code>streq</code> and <code>strneq</code> search operators and
				update constraints for passwords.
				(For non-passwords, these are equivalent to <code>eq</code> and
				<code>neq</code>.)
				These operate on the raw hash instead of the password.
			</p>
			<p>
				For C source, don't generate <code>INSERT</code> SQL if it's not
				going to be used.
				This has no impact on running code, but reduces generated code size
				ever so slightly.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.8.0</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2019-11-06">2019-11-06</time>
		</header>
		<aside>
			<p>
				<strong>Possibly API-breaking changes</strong>: now using
				<a href="https://kristaps.bsd.lv/sqlbox">sqlbox</a> instead of 
				<a href="https://kristaps.bsd.lv/ksql">ksql</a> for the database
				access library.
				This is due to the performance benefits and simpler API.
				The library also mandates safe operation instead of making it
				optional, so (for example) all database operations must be specified
				in advance.
				Specifically, it will no longer accept SQL not passed at start.
			</p>
			<p>
				Second, make <b>-s</b> the default for
				<a href="ort-c-source.1.html">ort-c-source(1)</a> and
				<a href="ort-c-header.1.html">ort-c-header(1)</a>.
				The underlying database access library only supports split-process
				mode, versus <a href="https://kristaps.bsd.lv/ksql">ksql</a> which
				also had an <q>unsafe</q> mode.
			</p>
			<p>
				Third, and most significantly, require using
				<code>struct ort</code> instead of having direct access to
				<code>struct sqlbox</code> (was <code>struct ksql</code>).
				This mirrors the situation of roles being enabled.
				If you have code that did not use roles <i>and</i> directly used the
				<code>struct ksql</code> to interface with the database via custom
				strings, the code will not to be re-written to use safer
				conventions.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.7.8</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2019-07-17">2019-07-17</time>
		</header>
		<aside>
			<p>
				Allow the <code>format</code> function of 
				<a href="ort-javascript.1.html">ort-javascript(1)</a>
				accept a <code>null</code> class name parameter, which switches into
				element-replacement mode.
				While here, improve the 
				<a href="https://man.openbsd.org/style.9">style(9)</a> of the
				generated code and add some extra documentation.
				Also continue to add more content to the
				<a href="ort-javascript.1.html">ort-javascript(1)</a>
				manpage regarding namespacing and class construction.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.7.7</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2019-07-16">2019-07-16</time>
		</header>
		<aside>
			<p>
				Significantly improve manpage documentation.
				Have generated code adhere more closely to
				<a href="https://man.openbsd.org/style.9">style(9)</a> when
				appropriate.
			</p>
			<p>
				This release features lots of internal improvements to code
				readability, both in terms of documentation and style.
			</p>
			<p>
				Most importantly, it's now possible to use <code>--strict</code>
				when compiling the output of 
				<a href="ort-javascript.1.html">ort-javascript(1)</a>'s 
				TypeScript output.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.7.6</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2019-07-05">2019-07-05</time>
		</header>
		<aside>
			<p>
				Add the <code>count</code> query type and its associated C API
				functions.
				This is essentiallythe <code>COUNT</code> SQL command.
				It has its own role entry like the other query types.
				Clean up whitespace and line breaking in the C API output, while
				here.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.7.5</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2019-07-01">2019-07-01</time>
		</header>
		<aside>
			<p>
				Add boundary values for enumerations.
				In the C interface, this is <code>BITI_xxx__MAX</code>, where
				<code>xxx</code> is the name of the enumeration.
				For Java or TypeScript, this is <code>BITI__MAX</code> on the
				enumeration's object.
				Also fix a line termination bug.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.7.4</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2019-05-07">2019-05-07</time>
		</header>
		<aside>
			<p>
				When using concatenation (the <code>concat</code> operator) for a
				field with possibly-<code>null</code> values, wrap the field with a
				<code>COALESCE</code> statement.
				This prevents the foo = empty || yourval expression, which evaluates
				into another empty instead of the desired <code>yourval</code>.
			</p>
			<p>
				Make code and documentation consistent for <code>update</code>
				generated function.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.7.3</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2019-04-25">2019-04-25</time>
		</header>
		<aside>
			<p>
				Clarify the functionality of <b>-d</b> mode in <a
					href="ort-sqldiff.1.html">ort-sqldiff(1)</a>.
				Also make it work with bitfields and expand its operation for
				enumerations so as not to raise false positives during an upgrade.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.7.2</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2019-03-22">2019-03-22</time>
		</header>
		<aside>
			<p>
				Rename <q>kwebapp</q> to <q>openradtool</q>!
				This means that all binaries prefixed with <code>kwebapp-</code> 
				are now prefixed with the simpler <code>ort-</code>.
				Also, the JavaScript/TypeScript namespace is <code>ort</code>
				instead of <code>kwebapp</code> and code produced by the C API
				with roles uses <code>struct ort</code> and <code>enum 
					ort_role</code> instead of the earlier <code>kwbp</code>.
			</p>
			<p>
				While here, clean up a lot of documentation, especially in
				<a href="ort.5.html">ort(5)</a>, and also simplify several data
				structures.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.6.13</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-12-29">2018-12-29</time>
		</header>
		<aside>
			<p>
				Several versions in a row where I screwed up small things found 
				only after release.
				And then again.
				(Then one more time.)
				Sorry!
			</p>
			<p>
				Add the string concatenation operator (<code>concat</code>) for 
				updating fields.
				Now produces code usable on musl Linux thanks to 
				<a href="https://github.com/Duncaen">Duncaen</a> (alongside the
				earlier support for glibc).
				Also produces code running properly on FreeBSD.
				Stop using a deprecated function in 
				<a href="https://kristaps.bsd.lv/ksql">ksql</a> and use the safe
				version instead.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.6.9</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-12-09">2018-12-09</time>
		</header>
		<aside>
			<p>
				TypeScript now errors out if <code>NodeListOf</code> is used instead
				of <code>HTMLCollectionOf</code>, so use the proper invocation.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.6.8</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-12-06">2018-12-06</time>
		</header>
		<aside>
			<p>
				Forgot to zero some allocated memory in <code>unique</code> statements.
				Found with valgrind.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.6.7</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-12-03">2018-12-03</time>
		</header>
		<aside>
			<p>
				Allow <a href="kwebapp-sqldiff.1.html">kwebapp-sqldiff(1)</a> to
				optionally produce <q>drop table</q> commands.
			</p>
			<p>
				Fix that custom handlers are invoked for null values if null values
				are allowed by the configuration.
			</p>
			<p>
				Add <code>fillArrayByClass</code>, which is like
				<code>fillArray</code> but invoked over matching classes.
			</p>
			<p>
				Begin migration (internally) to new name, <i>openradtool</i>.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.6.6</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-11-23">2018-11-23</time>
		</header>
		<aside>
			<p>
				Add the <code>fillArrayOrHide</code>, <code>fillArrayOrShow</code>,
				<code>fillByClass</code>, and <code>fillInnerByClass</code> methods
				to the TypeScript and JavaScript output.
				The former two captures common uses of <code>fillArray</code>:
				hiding or showing an element if there are non-zero elements in the
				given array.
				The latter are convenience methods of wrapping a <code>fill</code>
				invocation with a <code>getElementsByClassName</code>.
			</p>
			<p>
				Make custom callbacks in the JavaScript/TypeScript output override
				the defaults, instead of coming beforehand.
				Document this behaviour.
				(Before, the order was unspecified.)
			</p>
			<p>
				Re-organise internals for better library support.
				The library isn't exported, but may be (and is) used.
				No functional change.
			</p>
			<p>
				Make <code>default</code> keyword be handled when emitted
				configurations.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.6.5</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-11-02">2018-11-02</time>
		</header>
		<aside>
			<p>
				Add <code>default</code> support for text, emails, and dates.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.6.4</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-10-23">2018-10-23</time>
		</header>
		<aside>
			<p>
				Make sure that <a href="https://kristaps.bsd.lv/ksql">ksql(3)</a> is
				configured for foreign keys.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.6.3</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-10-09">2018-10-09</time>
		</header>
		<aside>
			<p>
				Take <code>unique</code> statements into account when warning
				whether a <code>search</code> statement might return multiple
				results.
				Also add some examples for using <code>unique</code>.
			</p>
			<p>
				Fix a crash in <a href="kwebapp-xliff.1.html">kwebapp-xliff(1)</a>.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.6.2</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-09-28">2018-09-28</time>
		</header>
		<aside>
			<p>
				<i>Same as 0.6.1 except a small fix for packaging.
					Below is the message from 0.6.1</i>.
			</p>
			<p>
				Add ability to convert <i>from</i> JSON back into objects.
				This uses <a
					href="https://github.com/zserge/jsmn">jsmn</a>,
				as it's simple, fast, and easy to bundle directly into the sources.
				See the <code><b>-J</b></code> flag in 
				<a href="kwebapp-c-header.1.html">kwebapp-c-header(1)</a> and
				<a href="kwebapp-c-source.1.html">kwebapp-c-source(1)</a> for details.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.6.1</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-09-26">2018-09-26</time>
		</header>
		<aside>
			<p>
				Add ability to convert <i>from</i> JSON back into objects.
				This uses <a
					href="https://github.com/zserge/jsmn">jsmn</a>,
				as it's simple, fast, and easy to bundle directly into the sources.
				See the <code><b>-J</b></code> flag in 
				<a href="kwebapp-c-header.1.html">kwebapp-c-header(1)</a> and
				<a href="kwebapp-c-source.1.html">kwebapp-c-source(1)</a> for details.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.6.0</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-09-06">2018-09-06</time>
		</header>
		<aside>
			<p>
				Allow configuration files to be broken apart for several applications.
				Now, all <span class="nm">kwebapp</span> utilities may be invoked
				with multiple files per configuration.
				This has made <a href="kwebapp-sqldiff.1.html">kwebapp-sqldiff(1)</a>
				and <a href="kwebapp-xliff.1.html">kwebapp-xliff(1)</a> have
				slightly awkward syntax for many-many invocations, 
				but the usual UNIX conventions of standard input and option parsing
				are respected.
				The existing calling convention is also still usable.
			</p>
			<p>
				For <a href="kwebapp-sqldiff.1.html">kwebapp-sqldiff(1)</a>,
				introduce the concept of a default value that's used in <code>ALTER
					TABLE</code> statements for new columns.
				This currently is only defined for number types.
				The default is documented in <a href="kwebapp.5.html">kwebapp(5)</a>.
			</p>
			<p>
				Rename <code>xxx-yyy-date</code> to <code>xxx-yyy-date-value</code>
				for consistency (oops!), then add <code>xxx-yyy-date-text</code>.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.5.7</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-08-25">2018-08-25</time>
		</header>
		<aside>
			<p>
				Have several new class recognised in <code>fill</code> methods as
				generated by <a
					href="kwebapp-javascript.1.html">kwebapp-javascript(1)</a>.
				The <code>xxx-yyy-bits-checked</code> is now recognised for
				<code>bit</code> and <code>bits</code> types and it will check input
				boxes whose value is covered by the field's value.
				The <code>xxx-yyy-date</code>, for ISO 8601 formatting of
				<code>epoch</code> and <code>date</code> types.
				Lastly, <code>xxx-yyy-value-checked</code> for checking general
				input boxes matching input values.
			</p>
			<p>
				All of these is documented in the manpage and in the output jsdoc.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.5.6</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-08-04">2018-08-04</time>
		</header>
		<aside>
			<p>
				Fix TypeScript generation for enumerations.
				Invert logic for language selection so that language not found gets
				default.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.5.5</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-08-04">2018-08-04</time>
		</header>
		<aside>
			<p>
				Significantly update the TypeScript functionality of <a
					href="kwebapp-javascript.1.html">kwebapp-javascript(1)</a>:
				stipulate callback function types for the custom format handler.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.5.4</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-08-02">2018-08-02</time>
		</header>
		<aside>
			<p>
				Allow for updating translation files with <b>-u</b>.
				See <a href="kwebapp-xliff.1.html">kwebapp-xliff(1)</a> for details.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.5.3</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-07-27">2018-07-27</time>
		</header>
		<aside>
			<p>
				Allow a copy mode <b>-c</b> in <a
					href="kwebapp-xliff.1.html">kwebapp-xliff(1)</a>.
				Also don't allow tags (the &lt; character) in <code>jslabel</code> phrases.
				Fix specifying language <code>jslabel</code> for special phrases in <code>bits</code>.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.5.2</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-07-23">2018-07-23</time>
		</header>
		<aside>
			<p>
				Full translation capabilities!
				Now all <code>jslabel</code> strings may be translated out-of-band
				into the appropriate <code>jslabel.xxx</code> labels using the
				industry-standard XLIFF 1.2 format.
				Just use <a href="kwebapp-xliff.1.html">kwebapp-xliff(1)</a> to
				extract translatable strings, edit the content, then merge with the
				original configuration.
				The output can then be piped into <a
					href="kwebapp-javascript.1.html">kwebapp-javascript(1)</a>
				for dynamic per-language formatting!
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.5.1</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-06-26">2018-06-26</time>
		</header>
		<aside>
			<p>
				Clean up <code>make</code> output by putting version information
				into its own header file.
			</p>
			<p>
				Continue adding in TypeScript type information.
			</p>
			<p>
				Multi-language support: re-tool the <code>jslabel</code> feature to
				allow for multiple languages that detect the HTML (or XML)
				document's root language and only produce output for that language.
				This uses the <code>jslabel.lang</code> syntax.
				Also warn more about missing labels and be clearer on what to do
				when label information isn't found.
				Furthermore, the <code>unset</code> keyword has been changed to
				<code>isunset</code> and the <code>isnull</code> keyword has also been added.
				There is no longer a hard-coded <q>not given</q> value, and the
				class set on null values is now <code>kwbp-null</code> instead of
				<code>notgiven</code>.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.5.0</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-06-21">2018-06-21</time>
		</header>
		<aside>
			<p>
				Hello, Linux!
				The system now supports compiling on Linux and other non-OpenBSD systems.
				This has been enabled by bringing up to date with <a
					href="https://github.com/kristapsdz/oconfigure">oconfigure</a>
				and adding portability shims for password hashing and other tools.
			</p>
			<p>
				I'm also pleased to announce <a
					href="https://www.typescriptlang.org/">TypeScript</a>
				integration in <a href="kwebapp-javascript.1.html">kwebapp-javascript(1)</a>.
				This is still under development, but now exports proper TypeScript
				classes, interfaces, and so on.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.4.10</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-05-24">2018-05-24</time>
		</header>
		<aside>
			<p>
				Several fixes to having split-apart header files.
				Fix (and harmonise) the behaviour of <b>-N</b> in both
				<a href="kwebapp-c-header.1.html">kwebapp-c-header(1)</a> and
				<a href="kwebapp-c-source.1.html">kwebapp-c-source(1)</a>, and
				<b>-I</b> in the latter.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.4.9</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-05-09">2018-05-09</time>
		</header>
		<aside>
			<p>
				Bring up to date with <a
					href="https://github.com/kristapsdz/oconfigure">oconfigure</a>
				and also use newest safety mechanisms (the <q>result</q> interface)
				from <a href="https://kristaps.bsd.lv/ksql">ksql</a>.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.4.8</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-04-27">2018-04-27</time>
		</header>
		<aside>
			<p>
				Repair header inclusion (<span class="file">kcgijson.h</span>
				requires <span class="file">kcgi.h</span>) for <a
					href="kwebapp-c-source.1.html">kwebapp-c-source(1)</a>.
				Bring up to date with newest <a
					href="https://kristaps.bsd.lv/ksql">ksql</a>, which requires
				the default role have permission to open the database.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.4.7</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-03-13">2018-03-13</time>
		</header>
		<aside>
			<p>
				Set the configuration script's modes properly and fix the auditing
				HTML sample and fix the installation archive to include all files.
				Make the audit markup (and CSS) be easily embedded into other files.
			</p>
			<p>
				Split <a href="kwebapp-audit.1.html">kwebapp-audit(1)</a> into <a
					href="kwebapp-audit-json.1.html">kwebapp-audit-json(1)</a>
				and add the new <a
					href="kwebapp-audit-gv.1.html">kwebapp-audit-gv(1)</a> for
				brief <a href="https://www.graphviz.org/">GraphViz</a> output.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.4.6</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-03-10">2018-03-10</time>
		</header>
		<aside>
			<p>
				Fully switch over to <a
					href="https://kristaps.bsd.lv/ksql">ksql(3)</a>'s roles for
				database management.
				Also add <code>KWBP_VERSION</code> and <code>KWBP_VSTAMP</code> to
				the header file.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.4.5</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-02-15">2018-02-15</time>
		</header>
		<aside>
			<p>
				Significantly expand the auditing capability to show both the export
				and access to data.
				Before, the concepts were too closely linked.
				Now, both the JSON and non-JSON output are careful to note which
				data is simply accessable, and which may be exported as well (and
				via which paths through the code).
			</p>
			<p>
				Also fix code output by non-role-based systems.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.4.4</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-01-30">2018-01-30</time>
		</header>
		<aside>
			<p>
				Fix the <code>noexport</code> empty statement, which was causing
				assertions when invoked in certain situations.
				Also start using <a
					href="https://kristaps.bsd.lv/ksql">ksql(3)</a>'s stored
				statement functionality, which improves security.
				Add partial support for roles within ksql(3) as well, but leave them
				unimplemented for the time being.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.4.3</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-01-17">2018-01-17</time>
		</header>
		<aside>
			<p>
				Fix <a
					href="https://github.com/kristapsdz/kwebapp/issues/2">issues/2</a>,
				allowing limits, offsets, and orderings to come after an empty
				<q>WHERE</q> statement.
			</p>
			<p>
				Allow <code>noexport</code> in a structure's roles to accept an
				empty name, which indicates that no fields should be exported.
			</p>
			<p>
				Significantly chop the size of the output JavaScript file from
				<a href="kwebapp-javascript.1.html">kwebapp-javascript(1)</a>.
				Reduction of nearly 40% from the file size of the last version!
				This is a savings in code size along&#8212;the bulk of the files
				are often comments.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.4.2</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-12-27">2017-12-27</time>
		</header>
		<aside>
			<p>
				Support auto-numbering of enumerations.
				The scheme is to start at the maximum assigned number plus one or
				zero, whichever is greater, and assign incrementally in order of
				appearance.
			</p>
			<p>
				Add the <code>date</code> pseudo-type that aliases
				<code>epoch</code> but uses the date validation input.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.4.1</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-12-26">2017-12-26</time>
		</header>
		<aside>
			<p>
				Fix: <code>LIMIT</code> set goes after <code>ORDER BY</code>.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.4.0</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-12-20">2017-12-20</time>
		</header>
		<aside>
			<p>
				Split <a href="kwebapp.1.html">kwebapp(1)</a> into <a
					href="kwebapp-c-header.1.html">kwebapp-c-header(1)</a>, <a
					href="kwebapp-c-source.1.html">kwebapp-c-source(1)</a>, <a
					href="kwebapp-javascript.1.html">kwebapp-javascript(1)</a>,
				<a href="kwebapp-sql.1.html">kwebapp-sql(1)</a>, and <a
					href="kwebapp-sqldiff.1.html">kwebapp-sqldiff(1)</a>.
				The historical calling conventions of using <a
					href="kwebapp.1.html">kwebapp(1)</a> with output flags is no
				longer accepted.
			</p>
			<p>
				Add <a href="kwebapp-audit.1.html">kwebapp-audit(1)</a>.
				This tool allows configurations to be audited for role permissions.
				It effectively takes a configuration and determines all possible
				access (data access, modify, etc.) available to a given role and
				produces a report.
				Reports can be on the command-line or JSON.
				A sample implementation of the JSON file is installed.
			</p>
			<p>
				Allow for <code>comment</code> strings to be associated with roles.
			</p>
			<p>
				The audit functionality is part of a project generously funded by
				CAPEM Solutions, Inc.
				Thank you!
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.3.9</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-12-06">2017-12-06</time>
		</header>
		<aside>
			<p>
				Allow for <code>update</code> and <code>delete</code> to operate
				without constraints.
				See <a href="kwebapp.5.html">kwebapp(5)</a> for syntax.
				Also add transaction call-through functions to the generated C API.
				This is necessary in role-based mode since the underlying
				<a href="https://kristaps.bsd.lv/ksql">ksql</a> API is shielded.
				These are documented in <a href="kwebapp.1.html">kwebapp(1)</a>.
			</p>
			<p>
				Fix a crash when having <code>limit</code> statements with
				<code>enum</code> types.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.3.8</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-11-24">2017-11-24</time>
		</header>
		<aside>
			<p>
				Lift the restriction on alias counts (total number of inner joins)
				from 26 to 17576.
				This can easily be expanded further: the limitation is purely for
				simplicity's sake.
			</p>
			<p>
				Add the <code>distinct</code> field to queries.
				This field, in its basic form, enforced the SQL
				<code>DISTINCT</code> keyword.
				However, it can also be used for nested fields in a structure,
				effectively only returning distinct rows of nested structures.
				The canonical example is returning only distinct album fields that
				are <code>struct</code> foreign key references of a track table.
				All of this is documented in <a
					href="kwebapp.5.html">kwebapp(5)</a>.
			</p> 
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.3.7</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-11-23">2017-11-23</time>
		</header>
		<aside>
			<p>
				Bug-fixes in created C code to account for line-breaking long SQL
				statements.
				(This is an in-progress effort.)
				Also add the <code>unset jslabel</code> statement for bit-fields.
				This allows the generated JavaScript <code>format()</code> function
				to provide a value if the field exists but has not been set with any
				bits.
				(This is yet to be documented for <a
					href="kwebapp.1.html">kwebapp(1)</a> as the feature is still
				experimental.)
			</p> 
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.3.6</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-11-18">2017-11-18</time>
		</header>
		<aside>
			<p>
				Lots of new features!
				Add the <code>order</code> statement for ordering <code>list</code>
				and <code>iterate</code> results.
				It can also act as a way to define single results over non-unique
				fields by combining the <code>search</code> statement with
				<code>limit</code>.
				Allow for limit offsets by extending the <code>limit</code> syntax.
				Lastly, introduce the <code>bit</code> bit index type and the
				<code>bits</code> top-level type for working with bit-fields.
				All of these are documented in <a href="kwebapp.5.html">kwebapp(5)</a>.
			</p> 
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.3.4</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-11-13">2017-11-13</time>
		</header>
		<aside>
			<p>
				Disallow duplicate <code>enum</code> and <code>struct</code> names.
				(These will otherwise collide in the C namespace.)
				Improve the documentation (function arguments) in the produced C
				header file.
				Output JavaScript <code>enum</code> values&#8212;this is described
				in <a href="kwebapp.1.html">kwebapp(1)</a>.
			</p> 
			<p> 
				Add the <code>and</code> and <code>or</code> logical (bit-wise)
				operations for search constraints.
			</p> 
			<p> 
				Finally allow comments!
				These begin at any time with the hash mark and continue to the end
				of line.
				(My motivation was modelines for vim.)
			</p> 
			<p> 
				Lastly, and the biggest, allow for having <code>struct</code> fields
				on <code>null</code> foreign keys.
				This requires the system to perform extra <code>SELECT</code>
				statements when the keys aren't <code>null</code> (which is noted in
				the generated API comments on a per-function basis), but overall
				it's very useful.
			</p> 
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.3.3</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-11-01">2017-11-01</time>
		</header>
		<aside>
			<p>
				Add the <code>like</code> operator type.
				This allows for primitive text searching.
				(This will become more advanced in time.)
				Allow the custom callback for JavaScript functions to optionally
				accept an array of functions for structure-field or structure in
				general.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.3.2</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-10-30">2017-10-30</time>
		</header>
		<aside>
			<p>
				Add the <code>bit</code> type to work with <a
					href="https://kristaps.bsd.lv/kcgi">kcgi</a>'s new bit
				validator.
				Fix the JavaScript output to propogate custom callbacks (see <a
					href="kwebapp.1.html">kwebapp(1)</a>) in the
				<code>fillArray</code> function.
				Lastly, add feature that allows an update <code>update</code>
				statement translate into updating all fields.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.3.1</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-10-27">2017-10-27</time>
		</header>
		<aside>
			<p>
				Repair the <a href="http://usejsdoc.org">jsdoc</a> by actually
				checking it.
				Also add custom callback handling for individual structure/fields.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.3.0</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-10-25">2017-10-25</time>
		</header>
		<aside>
			<p>
				Require the <code>insert</code> statement within a structure to
				generate insertion functions.
			</p>
			<p>
				Disambiguate the configuration grammar with respect to structure
				linking.
				Earlier, <code>struct</code> types could specify the linkage from
				another field to a foreign key.
				Now, the linkage must be specified within the other field itself.
				This clears up the situation where a structure and the referring
				field had different types.
				It also allows all foreign key information (e.g., <code>on
					delete</code> modifiers) to exist unambiguously on the
				referring field itself.
			</p>
			<p>
				Add the <code>actup</code> and <code>actdel</code> modifiers on a
				foreign key reference.
				For example, <code>actdel cascade</code> specifies <code>ON DELETE
					CASCADE</code>.
			</p>
			<p>
				Properly wrap comments (at word boundaries) at 70 columns.
			</p>
			<p>
				Introduce RBAC functionality: the <code>roles</code> top-level
				object defining the roles themselves such that each structure
				statement (e.g., <code>insert</code>) can be wrapped in a
				<code>roles</code> statement limiting access.
				When the top-level <code>roles</code> is defined (even if empty),
				the <code>ksql</code> database handle is hidden from the API, and
				instead an opaque <code>kwbp</code> is used.
				This allows for full role-based access to the database.
				Read the <a href="kwebapp.5.html">kwebapp(5)</a> for more
				information.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.12</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-09-18">2017-09-18</time>
		</header>
		<aside>
			<p>
				Bug-fix generated JavaScript.
				Also clarified some warnings and errors generated during the link phase.
				Lastly, inherit <code>CFLAGS</code> during configuration and use <b>-Wextra</b> during compilation.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.11</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-07-06">2017-07-06</time>
		</header>
		<aside>
			<p>
				Add more power to the JavaScript output and clarify its operation.
				First, clarify how the root DOM element is handled as to whether it can have classes to be filled in.
				(Yes.)
				Second, add a <code>fillInner()</code> function to handle cases where the root shouldn't be filled in.
				Finally, add a <code>fillArray</code> that fills from an array of objects.
				This removes the first element, clears the root element, then clones, fills in, and appends the first element
				for all objects.
				The <code>fillInner()</code> functionality comes in handy to protect nested objects from clobbering each other.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.10</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-07-05">2017-07-05</time>
		</header>
		<aside>
			<p>
				Fix a bug that crept into the last release where iterate/list terms with an empty constraint set resulted in a
				dangling <code>WHERE</code> in the generated SQL.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.9</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-07-04">2017-07-04</time>
		</header>
		<aside>
			<p>
				Allow iteration and listing to accept no terms; i.e., they produce all rows for that structure.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.8</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-06-29">2017-06-29</time>
		</header>
		<aside>
			<p>
				Allow <a href="https://kristaps.bsd.lv/ksql">ksql(3)</a>'s <q>split process</q> model to be used when
				-<b>F</b><i>splitproc</i> is specified.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.7</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-06-16">2017-06-16</time>
		</header>
		<aside>
			<p>
				Add <code>sqldiff</code> mode support for enumerations.
				This makes sure that enumeration objects are consistent (non-destructive) across configurations.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.6</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-06-15">2017-06-15</time>
		</header>
		<aside>
			<p>
				Add enumerations (<code>enum</code>) as top-level objects.
				This allows the C API to represent integers as sets of constants and makes validation more precise.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.5</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-06-12">2017-06-12</time>
		</header>
		<aside>
			<p>
				Add <code>eq</code> operator for validation.
				(Probably not used for numeric, but useful for strings in some circumstances.)
				Also add <code>email</code> type.
				This is just a string type with special validation.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.4</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-06-11">2017-06-11</time>
		</header>
		<aside>
			<p>
				Add the ability for <q>update</q> fields to accept a modifier.
				This translates into the SQL equivalent to <code>update foo set x = x + ?</code>.
				Right now, only the <code>inc</code> and <code>dec</code> modifiers are supported, but it's easy to add in new ones.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.3</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-30">2017-05-30</time>
		</header>
		<aside>
			<p>
				One-liner so that <q>unique</q> fields can be foreign keys (but not <q>struct</q>s).
				Also add the <q>epoch</q> native type that uses the <code>time_t</code> type for the C API.
				For OpenBSD with 64-bit signed integral time, this is just an alias for <code>int</code> except for the type
				in the API.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.2</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-25">2017-05-25</time>
		</header>
		<aside>
			<p>
				Fix bug in recursive reference checker.
				This now works properly and allows [properly] for self-referencing structures for native type references.
				Add special function to JSON print iterate entries.
				These work together with the iterate functions and accept their callback syntax.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.1</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-22">2017-05-22</time>
		</header>
		<aside>
			<p>
				Finally fix naming of anonymous query (search, list, iterate), update, and delete functions.
				This now uses the basic syntax of <code>db_xx_get_by_yy_op</code>, where <q>xx</q> is the structure, <q>yy</q>
				is the field, and <q>op</q> is the operation.
				Adding the <q>op</q> field disambiguates fields.
				(The operation also makes the earlier double-underscore unneeded.)
			</p>
			<p>
				Also add functions to print JSON arrays if and only if a structure has list iterators specified.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.0</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-20">2017-05-20</time>
		</header>
		<aside>
			<p>
				Flag day: use the <b>-O</b> flag to specify output type (hence minor bump).
				Also move <b>-v</b> and <b>-j</b> into <b>-F</b><i>valids</i> and <b>-F</b><i>json</i> as part of the new <b>-F</b> flag.
				This cleans up a lot of options and leaves the door open for new output formats and configuration options.
			</p>
			<p>
				Generate <a href="https://usejsdoc.org">jsdoc</a> along with the JavaScript <b>-O</b><i>javascript</i> output.
				Also handle the <code>foo-xxxx-value</code> class, where <q>foo</q> is the structure and <q>xxxx</q> is the
				field, for auto-population of form elements.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.1.9</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-19">2017-05-19</time>
		</header>
		<aside>
			<p>
				Introduce <b>-J</b>, which generates JavaScript output.
				This completes the chain from HTML form input to filling in HTML DOM trees with CGI script output.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.1.8</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-18">2017-05-18</time>
		</header>
		<aside>
			<p>
				Handle empty insertions by using <code>DEFAULT VALUES</code> on the insertion.
				Accept inequality operators for search, update, and delete constraints.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.1.7</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-15">2017-05-15</time>
		</header>
		<aside>
			<p>
				Add limit clauses to make validation more meaningful.
				(See the <b>limit</b> field clause in <a href="kwebapp.5.html">kwebapp(5)</a>.)
				Now input values can be limited.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.1.6</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-13">2017-05-13</time>
		</header>
		<aside>
			<p>
				Add full validation sequence required by <a href="https://kristaps.bsd.lv/kcgi">kcgi(3)</a>, specifically
				<code>khttp_parse(3)</code>.
				With this in place, applications can push the given structure directly into the HTTP parser without needing to
				create the array themselves.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.1.5</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-12">2017-05-12</time>
		</header>
		<aside>
			<p>
				Add field validation routines.
				See the <b>-v</b> flag in <a href="kwebapp.1.html">kwebapp(1)</a>.
				This uses the field type (and modifiers) to create 
				<a href="https://kristaps.bsd.lv/kcgi">kcgi(3)</a> validation routines.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.1.4</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-05">2017-05-05</time>
		</header>
		<aside>
			<p>
				Require a semicolon after <q>struct</q> statements.
				This is future-proofing for options following the <q>struct</q> data.
				Also added a <q>noexport</q> field option that disallows fields from being JSON-exported.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.1.3</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-04">2017-05-04</time>
		</header>
		<aside>
			<p>
				Handle empty (<q>null</q>) values as specified in the configuration when exporting to JSON.
				Also, properly handle blob values as base64-encoded strings.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.1.2</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-02">2017-05-02</time>
		</header>
		<aside>
			<p>
				Introduce <b>-j</b>, which also emits JSON output functions using <a
					href="https://kristaps.bsd.lv/kcgi">kcgi(3)</a>'s interface.
				These complete the chain of exporting data from a database directly to client applications.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.1.1</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-04-29">2017-04-29</time>
		</header>
		<aside>
			<p>
				Have the singleton search function (e.g., <q>search foo: name bar</q>) use the operator <q>get</q> in generated
				function names.
				Before, these would be (following the example) <code>db_foo_by_foo</code>.
				Now they're <code>db_foo_get_by_foo</code>.
				This is more consistent with the other search functions.
			</p>
			<p>
				Renamed the <b>-h</b> flag to <b>-C</b>.
				(Source in lowercase, header in uppercase.)
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.1.0</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-04-27">2017-04-27</time>
		</header>
		<aside>
			<p>
				Initial stable internals.
				I'm still going to change the generated API function names before adding features, but the system is already in
				use.
			</p>
		</aside>
	</article>
</articles>
